// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"os"
	"unicode/utf8"

	"BabyDuck/token"
)

const (
	NoState    = -1
	NumStates  = 78
	NumSymbols = 108
)

type Lexer struct {
	src     []byte
	pos     int
	line    int
	column  int
	Context token.Context
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:     src,
		pos:     0,
		line:    1,
		column:  1,
		Context: nil,
	}
	return lexer
}

// SourceContext is a simple instance of a token.Context which
// contains the name of the source file.
type SourceContext struct {
	Filepath string
}

func (s *SourceContext) Source() string {
	return s.Filepath
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := os.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	lexer := NewLexer(src)
	lexer.Context = &SourceContext{Filepath: fpath}
	return lexer, nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = &token.Token{}
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		tok.Pos.Context = l.Context
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn
	tok.Pos.Context = l.Context

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '"'
1: ' '
2: '!'
3: '?'
4: '.'
5: ','
6: ';'
7: ':'
8: '-'
9: '_'
10: '('
11: ')'
12: '+'
13: '*'
14: '{'
15: '}'
16: '['
17: ']'
18: '='
19: '&'
20: '/'
21: '%'
22: '"'
23: '0'
24: 'p'
25: 'r'
26: 'o'
27: 'g'
28: 'r'
29: 'a'
30: 'm'
31: 'm'
32: 'a'
33: 'i'
34: 'n'
35: 'e'
36: 'n'
37: 'd'
38: 'v'
39: 'a'
40: 'r'
41: 'p'
42: 'r'
43: 'i'
44: 'n'
45: 't'
46: 'w'
47: 'h'
48: 'i'
49: 'l'
50: 'e'
51: 'd'
52: 'o'
53: 'i'
54: 'f'
55: 'e'
56: 'l'
57: 's'
58: 'e'
59: 'v'
60: 'o'
61: 'i'
62: 'd'
63: 'i'
64: 'n'
65: 't'
66: 'f'
67: 'l'
68: 'o'
69: 'a'
70: 't'
71: '+'
72: '-'
73: '*'
74: '/'
75: '='
76: '<'
77: '>'
78: '!'
79: '='
80: '{'
81: '}'
82: '('
83: ')'
84: '['
85: ']'
86: ','
87: ';'
88: '.'
89: ':'
90: '_'
91: '\t'
92: '\n'
93: '\r'
94: ' '
95: '/'
96: '/'
97: '\n'
98: '/'
99: '*'
100: '*'
101: '*'
102: '/'
103: '1'-'9'
104: 'A'-'Z'
105: 'a'-'z'
106: '0'-'9'
107: .
*/
