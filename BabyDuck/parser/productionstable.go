// Code generated by gocc; DO NOT EDIT.

package parser

import (
	"BabyDuck/semantics"
    "fmt"
	"BabyDuck/token"
)

type (
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib, interface{}) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Programa	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Programa : ProgramaHeader ProgramaP ProgramaMain end	<< func() (Attrib, error) {
            semantics.AddQuadruple(16, -1, -1, -1)
            return nil, nil
        }() >>`,
		Id:         "Programa",
		NTType:     1,
		Index:      1,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            semantics.AddQuadruple(16, -1, -1, -1)
            return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `ProgramaHeader : program id semicolon	<< func() (Attrib, error) {
            tok, ok := X[1].(*token.Token)
            if !ok {
                return nil, fmt.Errorf("esperaba *token.Token en X[1], obtuve %T", X[1])
            }
            name := string(tok.Lit)

            semantics.ProgramName = name
            err := semantics.AddFunction(name, "program")
            if err != nil {
                return nil, err
            }
            err = semantics.SetCurrentFunction(name)
            if err != nil {
                return nil, err
            }
            semantics.AddQuadruple(8, -1, -1, -1) // Goto con destino pendiente
            semantics.MainGotoIndex = len(semantics.Quadruples) - 1
            return nil, nil
        }() >>`,
		Id:         "ProgramaHeader",
		NTType:     2,
		Index:      2,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            tok, ok := X[1].(*token.Token)
            if !ok {
                return nil, fmt.Errorf("esperaba *token.Token en X[1], obtuve %T", X[1])
            }
            name := string(tok.Lit)

            semantics.ProgramName = name
            err := semantics.AddFunction(name, "program")
            if err != nil {
                return nil, err
            }
            err = semantics.SetCurrentFunction(name)
            if err != nil {
                return nil, err
            }
            semantics.AddQuadruple(8, -1, -1, -1) // Goto con destino pendiente
            semantics.MainGotoIndex = len(semantics.Quadruples) - 1
            return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `ProgramaMain : main MainStart Body	<< func() (Attrib, error) {
        return nil, nil; 
         }() >>`,
		Id:         "ProgramaMain",
		NTType:     3,
		Index:      3,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        return nil, nil; 
         }()
		},
	},
	ProdTabEntry{
		String: `MainStart : empty	<< func() (Attrib, error) {
            err := semantics.AddFunction("main", "void")
            if err != nil {
                return nil, fmt.Errorf("Error al agregar main: %v", err)
            }

            err = semantics.SetCurrentFunction("main")
            if err != nil {
                return nil, fmt.Errorf("Error al setear main como función actual: %v", err)
            }
            semantics.Quadruples[semantics.MainGotoIndex].Result = len(semantics.Quadruples)

            semantics.FunctionDirectory["main"].StartQuad = len(semantics.Quadruples)
            return nil, nil
        }() >>`,
		Id:         "MainStart",
		NTType:     4,
		Index:      4,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            err := semantics.AddFunction("main", "void")
            if err != nil {
                return nil, fmt.Errorf("Error al agregar main: %v", err)
            }

            err = semantics.SetCurrentFunction("main")
            if err != nil {
                return nil, fmt.Errorf("Error al setear main como función actual: %v", err)
            }
            semantics.Quadruples[semantics.MainGotoIndex].Result = len(semantics.Quadruples)

            semantics.FunctionDirectory["main"].StartQuad = len(semantics.Quadruples)
            return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `ProgramaP : Vars FP	<<  >>`,
		Id:         "ProgramaP",
		NTType:     5,
		Index:      5,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ProgramaP : FP	<<  >>`,
		Id:         "ProgramaP",
		NTType:     5,
		Index:      6,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FP : Funcs FP	<<  >>`,
		Id:         "FP",
		NTType:     6,
		Index:      7,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FP : empty	<<  >>`,
		Id:         "FP",
		NTType:     6,
		Index:      8,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Vars : var VarsP	<<  >>`,
		Id:         "Vars",
		NTType:     7,
		Index:      9,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `VarsP : id X colon Type semicolon Y	<< func() (Attrib, error) {
            idTok, ok := X[0].(*token.Token)
            if !ok {
                return nil, fmt.Errorf("varsP: se esperaba *token.Token en X[0], obtuve %T", X[0])
            }
            idList, err := semantics.CollectIDs(string(idTok.Lit), X[1])
            if err != nil {
                return nil, err
            }
            typeStr, ok := X[3].(string)
            if !ok {
                return nil, fmt.Errorf("varsP: se esperaba string en X[3], obtuve %T", X[3])
            }
            for _, id := range idList {
                if err := semantics.AddVariable(id, typeStr); err != nil {
                    return nil, err
                }
            }
            return nil, nil
        }() >>`,
		Id:         "VarsP",
		NTType:     8,
		Index:      10,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            idTok, ok := X[0].(*token.Token)
            if !ok {
                return nil, fmt.Errorf("varsP: se esperaba *token.Token en X[0], obtuve %T", X[0])
            }
            idList, err := semantics.CollectIDs(string(idTok.Lit), X[1])
            if err != nil {
                return nil, err
            }
            typeStr, ok := X[3].(string)
            if !ok {
                return nil, fmt.Errorf("varsP: se esperaba string en X[3], obtuve %T", X[3])
            }
            for _, id := range idList {
                if err := semantics.AddVariable(id, typeStr); err != nil {
                    return nil, err
                }
            }
            return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `X : comma id X	<< func() (Attrib, error) {
        idTok, ok := X[1].(*token.Token)
        if !ok {
            return nil, fmt.Errorf("x: se esperaba *token.Token en X[1], obtuve %T", X[1])
        }
        return semantics.AppendID(string(idTok.Lit), X[2])
    }() >>`,
		Id:         "X",
		NTType:     9,
		Index:      11,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        idTok, ok := X[1].(*token.Token)
        if !ok {
            return nil, fmt.Errorf("x: se esperaba *token.Token en X[1], obtuve %T", X[1])
        }
        return semantics.AppendID(string(idTok.Lit), X[2])
    }()
		},
	},
	ProdTabEntry{
		String: `X : empty	<< func() (Attrib, error) {
            return semantics.EmptyIDList()
        }() >>`,
		Id:         "X",
		NTType:     9,
		Index:      12,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return semantics.EmptyIDList()
        }()
		},
	},
	ProdTabEntry{
		String: `Y : VarsP	<<  >>`,
		Id:         "Y",
		NTType:     10,
		Index:      13,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Y : empty	<<  >>`,
		Id:         "Y",
		NTType:     10,
		Index:      14,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Type : int	<< func() (Attrib, error) {
            return "int", nil
        }() >>`,
		Id:         "Type",
		NTType:     11,
		Index:      15,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return "int", nil
        }()
		},
	},
	ProdTabEntry{
		String: `Type : float	<< func() (Attrib, error) {
            return "float", nil
        }() >>`,
		Id:         "Type",
		NTType:     11,
		Index:      16,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return "float", nil
        }()
		},
	},
	ProdTabEntry{
		String: `Body : lbrace BodyP rbrace	<<  >>`,
		Id:         "Body",
		NTType:     12,
		Index:      17,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `BodyP : empty	<<  >>`,
		Id:         "BodyP",
		NTType:     13,
		Index:      18,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `BodyP : Statement BodyP	<<  >>`,
		Id:         "BodyP",
		NTType:     13,
		Index:      19,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : Assign	<<  >>`,
		Id:         "Statement",
		NTType:     14,
		Index:      20,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : Condition	<<  >>`,
		Id:         "Statement",
		NTType:     14,
		Index:      21,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : Cycle	<<  >>`,
		Id:         "Statement",
		NTType:     14,
		Index:      22,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : FCall	<<  >>`,
		Id:         "Statement",
		NTType:     14,
		Index:      23,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : Print	<<  >>`,
		Id:         "Statement",
		NTType:     14,
		Index:      24,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Print : print lparen PrintP rparen semicolon	<< func() (Attrib, error) {
            for i := len(semantics.PrintArgs) - 1; i >= 0; i-- {
                semantics.AddQuadruple(11, semantics.PrintArgs[i], -1, -1)
            }
            semantics.PrintArgs = []int{}
            return nil, nil
        }() >>`,
		Id:         "Print",
		NTType:     15,
		Index:      25,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            for i := len(semantics.PrintArgs) - 1; i >= 0; i-- {
                semantics.AddQuadruple(11, semantics.PrintArgs[i], -1, -1)
            }
            semantics.PrintArgs = []int{}
            return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `PrintP : string_literal PrintPP	<< func() (Attrib, error) {
            tok, ok := X[0].(*token.Token)
            if !ok {
                return nil, fmt.Errorf("print: cte inválida (string)")
            }
            lit := string(tok.Lit)

            addr := semantics.ConstTab.GetOrAddConstant(lit, "string")

            semantics.PrintArgs = append(semantics.PrintArgs, addr)

            return nil, nil
        }() >>`,
		Id:         "PrintP",
		NTType:     16,
		Index:      26,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            tok, ok := X[0].(*token.Token)
            if !ok {
                return nil, fmt.Errorf("print: cte inválida (string)")
            }
            lit := string(tok.Lit)

            addr := semantics.ConstTab.GetOrAddConstant(lit, "string")

            semantics.PrintArgs = append(semantics.PrintArgs, addr)

            return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `PrintP : Expresion PrintPP	<< func() (Attrib, error) {
            expr, ok := X[0].(semantics.Operand)
            if !ok {
                return nil, fmt.Errorf("print: expresión inválida")
            }

            semantics.PrintArgs = append(semantics.PrintArgs, expr.Addr)
            return nil, nil
        }() >>`,
		Id:         "PrintP",
		NTType:     16,
		Index:      27,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            expr, ok := X[0].(semantics.Operand)
            if !ok {
                return nil, fmt.Errorf("print: expresión inválida")
            }

            semantics.PrintArgs = append(semantics.PrintArgs, expr.Addr)
            return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `PrintPP : empty	<< func() (Attrib, error) {
            return nil, nil
        }() >>`,
		Id:         "PrintPP",
		NTType:     17,
		Index:      28,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `PrintPP : comma PrintP	<< func() (Attrib, error) {
            return nil, nil
        }() >>`,
		Id:         "PrintPP",
		NTType:     17,
		Index:      29,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `Assign : id assign Expresion semicolon	<< func() (Attrib, error) {
            idTok, ok := X[0].(*token.Token)
            if !ok {
                return nil, fmt.Errorf("assign: se esperaba *token.Token en X[0], obtuve %T", X[0])
            }
            varName := string(idTok.Lit)

            // Obtener variable destino
            varInfo, err := semantics.LookupVariable(varName)
            if err != nil {
                return nil, err
            }

            // Obtener resultado de Expresion
            exprOp, ok := X[2].(semantics.Operand)
            if !ok {
                return nil, fmt.Errorf("assign: se esperaba Operand como resultado de Expresion")
            }

            // Verificar tipos
            if !semantics.TypeCompatible(varInfo.Type, exprOp.Type) {
                return nil, fmt.Errorf("assign: tipos incompatibles '%s' y '%s'", varInfo.Type, exprOp.Type)
            }

            // Generar cuádruplo de asignación (op = 0)
            semantics.AddQuadruple(0, exprOp.Addr, -1, varInfo.Address)

            return nil, nil
        }() >>`,
		Id:         "Assign",
		NTType:     18,
		Index:      30,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            idTok, ok := X[0].(*token.Token)
            if !ok {
                return nil, fmt.Errorf("assign: se esperaba *token.Token en X[0], obtuve %T", X[0])
            }
            varName := string(idTok.Lit)

            // Obtener variable destino
            varInfo, err := semantics.LookupVariable(varName)
            if err != nil {
                return nil, err
            }

            // Obtener resultado de Expresion
            exprOp, ok := X[2].(semantics.Operand)
            if !ok {
                return nil, fmt.Errorf("assign: se esperaba Operand como resultado de Expresion")
            }

            // Verificar tipos
            if !semantics.TypeCompatible(varInfo.Type, exprOp.Type) {
                return nil, fmt.Errorf("assign: tipos incompatibles '%s' y '%s'", varInfo.Type, exprOp.Type)
            }

            // Generar cuádruplo de asignación (op = 0)
            semantics.AddQuadruple(0, exprOp.Addr, -1, varInfo.Address)

            return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `Cycle : CycleStart do Body semicolon	<< func() (Attrib, error) {
            if len(semantics.JumpStack) < 2 {
                return nil, fmt.Errorf("cycle: jumpstack no tiene suficientes elementos")
            }

            // 5. Sacar posiciones: primero el falseJump, luego el inicio del ciclo
            falseJump, err := semantics.PopJump()
            if err != nil {
                return nil, fmt.Errorf("cycle: error al hacer popjump (falseJump): %v", err)
            }

            loopStart, err := semantics.PopJump()
            if err != nil {
                return nil, fmt.Errorf("cycle: error al hacer popjump (loopStart): %v", err)
            }

            // GOTO al inicio del ciclo
            semantics.AddQuadruple(8, -1, -1, loopStart)
            semantics.Quadruples[falseJump].Result = len(semantics.Quadruples)

            return nil, nil
        }() >>`,
		Id:         "Cycle",
		NTType:     19,
		Index:      31,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            if len(semantics.JumpStack) < 2 {
                return nil, fmt.Errorf("cycle: jumpstack no tiene suficientes elementos")
            }

            // 5. Sacar posiciones: primero el falseJump, luego el inicio del ciclo
            falseJump, err := semantics.PopJump()
            if err != nil {
                return nil, fmt.Errorf("cycle: error al hacer popjump (falseJump): %v", err)
            }

            loopStart, err := semantics.PopJump()
            if err != nil {
                return nil, fmt.Errorf("cycle: error al hacer popjump (loopStart): %v", err)
            }

            // GOTO al inicio del ciclo
            semantics.AddQuadruple(8, -1, -1, loopStart)
            semantics.Quadruples[falseJump].Result = len(semantics.Quadruples)

            return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `CycleStart : WhileStart lparen Expresion rparen	<< func() (Attrib, error) {
            // 2. Validar tipo
            if len(semantics.TypeStack) == 0 {
                return nil, fmt.Errorf("cycleStart: pila de tipos vacía")
            }

            condType := semantics.PopType()
            if condType != "bool" {
                return nil, fmt.Errorf("cycleStart: condición de while no es booleana, fue '%s'", condType)
            }

            cond := semantics.PopOperand()

            // cuádruplo GOTOF
            semantics.AddQuadruple(9, cond.Addr, -1, -1)

            //posición del GOTOF
            semantics.PushJump(len(semantics.Quadruples) - 1)

            return nil, nil
        }() >>`,
		Id:         "CycleStart",
		NTType:     20,
		Index:      32,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            // 2. Validar tipo
            if len(semantics.TypeStack) == 0 {
                return nil, fmt.Errorf("cycleStart: pila de tipos vacía")
            }

            condType := semantics.PopType()
            if condType != "bool" {
                return nil, fmt.Errorf("cycleStart: condición de while no es booleana, fue '%s'", condType)
            }

            cond := semantics.PopOperand()

            // cuádruplo GOTOF
            semantics.AddQuadruple(9, cond.Addr, -1, -1)

            //posición del GOTOF
            semantics.PushJump(len(semantics.Quadruples) - 1)

            return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `WhileStart : while	<< func() (Attrib, error) {
            // posición actual (inicio del ciclo)
            pos := len(semantics.Quadruples)
            semantics.PushJump(pos)
            return nil, nil
        }() >>`,
		Id:         "WhileStart",
		NTType:     21,
		Index:      33,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            // posición actual (inicio del ciclo)
            pos := len(semantics.Quadruples)
            semantics.PushJump(pos)
            return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `Condition : ConditionStart Body ConditionP semicolon	<<  >>`,
		Id:         "Condition",
		NTType:     22,
		Index:      34,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ConditionStart : if lparen Expresion rparen	<< func() (Attrib, error) {
            topType := semantics.PopType()
            if topType != "bool" {
                return nil, fmt.Errorf("condición de 'if' no es booleana (tipo fue '%s')", topType)
            }

            condResult := semantics.PopOperand()

            // 9 = GOTOF 
            semantics.AddQuadruple(9, condResult.Addr, -1, -1)
            semantics.PushJump(len(semantics.Quadruples) - 1)

            return nil, nil
        }() >>`,
		Id:         "ConditionStart",
		NTType:     23,
		Index:      35,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            topType := semantics.PopType()
            if topType != "bool" {
                return nil, fmt.Errorf("condición de 'if' no es booleana (tipo fue '%s')", topType)
            }

            condResult := semantics.PopOperand()

            // 9 = GOTOF 
            semantics.AddQuadruple(9, condResult.Addr, -1, -1)
            semantics.PushJump(len(semantics.Quadruples) - 1)

            return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `ConditionP : ElseJump Body SetEndJump	<<  >>`,
		Id:         "ConditionP",
		NTType:     24,
		Index:      36,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ElseJump : else	<< func() (Attrib, error) {
        semantics.AddQuadruple(8, -1, -1, -1)
        endJump := len(semantics.Quadruples) - 1

        // Pop del GOTOF (condición falsa)
        falseJump, err := semantics.PopJump()
        if err != nil {
            return nil, err
        }

        semantics.Quadruples[falseJump].Result = len(semantics.Quadruples)

        // GOTO para actualizar al final
        semantics.PushJump(endJump)
        return nil, nil
    }() >>`,
		Id:         "ElseJump",
		NTType:     25,
		Index:      37,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        semantics.AddQuadruple(8, -1, -1, -1)
        endJump := len(semantics.Quadruples) - 1

        // Pop del GOTOF (condición falsa)
        falseJump, err := semantics.PopJump()
        if err != nil {
            return nil, err
        }

        semantics.Quadruples[falseJump].Result = len(semantics.Quadruples)

        // GOTO para actualizar al final
        semantics.PushJump(endJump)
        return nil, nil
    }()
		},
	},
	ProdTabEntry{
		String: `SetEndJump : empty	<< func() (Attrib, error) {
        endJump, err := semantics.PopJump()
        if err != nil {
            return nil, err
        }

        // Actualizar el GOTO del then para que salte después del else
        semantics.Quadruples[endJump].Result = len(semantics.Quadruples)
        return nil, nil
    }() >>`,
		Id:         "SetEndJump",
		NTType:     26,
		Index:      38,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        endJump, err := semantics.PopJump()
        if err != nil {
            return nil, err
        }

        // Actualizar el GOTO del then para que salte después del else
        semantics.Quadruples[endJump].Result = len(semantics.Quadruples)
        return nil, nil
    }()
		},
	},
	ProdTabEntry{
		String: `Expresion : Exp EP	<< func() (Attrib, error) {
            if X[1] == nil {
                return X[0], nil
            }

            return X[1], nil
        }() >>`,
		Id:         "Expresion",
		NTType:     27,
		Index:      39,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            if X[1] == nil {
                return X[0], nil
            }

            return X[1], nil
        }()
		},
	},
	ProdTabEntry{
		String: `EP : empty	<< func() (Attrib, error) {
            return nil, nil
        }() >>`,
		Id:         "EP",
		NTType:     28,
		Index:      40,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `EP : gt Exp	<< func() (Attrib, error) {
            semantics.OperatorStack = append(semantics.OperatorStack, 6) // >
            
            // Extraer operandos y tipos
            right := semantics.PopOperand()
            left := semantics.PopOperand()
            rightType := semantics.PopType()
            leftType := semantics.PopType()
            op := semantics.PopOperator()
            
            if !semantics.TypeCompatible(leftType, rightType) {
                return nil, fmt.Errorf("EP: tipos incompatibles '%s' y '%s'", leftType, rightType)
            }

            tempAddr := semantics.Memory.Direccionar("temp", "bool")
            temp := semantics.Operand{Addr: tempAddr, Type: "bool"}
            semantics.AddQuadruple(op, left.Addr, right.Addr, tempAddr)

            semantics.PushOperand(temp)
            semantics.PushType("bool")

            return temp, nil
        }() >>`,
		Id:         "EP",
		NTType:     28,
		Index:      41,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            semantics.OperatorStack = append(semantics.OperatorStack, 6) // >
            
            // Extraer operandos y tipos
            right := semantics.PopOperand()
            left := semantics.PopOperand()
            rightType := semantics.PopType()
            leftType := semantics.PopType()
            op := semantics.PopOperator()
            
            if !semantics.TypeCompatible(leftType, rightType) {
                return nil, fmt.Errorf("EP: tipos incompatibles '%s' y '%s'", leftType, rightType)
            }

            tempAddr := semantics.Memory.Direccionar("temp", "bool")
            temp := semantics.Operand{Addr: tempAddr, Type: "bool"}
            semantics.AddQuadruple(op, left.Addr, right.Addr, tempAddr)

            semantics.PushOperand(temp)
            semantics.PushType("bool")

            return temp, nil
        }()
		},
	},
	ProdTabEntry{
		String: `EP : lt Exp	<< func() (Attrib, error) {
            semantics.OperatorStack = append(semantics.OperatorStack, 5) // <
            
            right := semantics.PopOperand()
            left := semantics.PopOperand()
            rightType := semantics.PopType()
            leftType := semantics.PopType()
            op := semantics.PopOperator()
            
            if !semantics.TypeCompatible(leftType, rightType) {
                return nil, fmt.Errorf("EP: tipos incompatibles '%s' y '%s'", leftType, rightType)
            }

            tempAddr := semantics.Memory.Direccionar("temp", "bool")
            temp := semantics.Operand{Addr: tempAddr, Type: "bool"}
            semantics.AddQuadruple(op, left.Addr, right.Addr, tempAddr)

            semantics.PushOperand(temp)
            semantics.PushType("bool")

            return temp, nil
        }() >>`,
		Id:         "EP",
		NTType:     28,
		Index:      42,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            semantics.OperatorStack = append(semantics.OperatorStack, 5) // <
            
            right := semantics.PopOperand()
            left := semantics.PopOperand()
            rightType := semantics.PopType()
            leftType := semantics.PopType()
            op := semantics.PopOperator()
            
            if !semantics.TypeCompatible(leftType, rightType) {
                return nil, fmt.Errorf("EP: tipos incompatibles '%s' y '%s'", leftType, rightType)
            }

            tempAddr := semantics.Memory.Direccionar("temp", "bool")
            temp := semantics.Operand{Addr: tempAddr, Type: "bool"}
            semantics.AddQuadruple(op, left.Addr, right.Addr, tempAddr)

            semantics.PushOperand(temp)
            semantics.PushType("bool")

            return temp, nil
        }()
		},
	},
	ProdTabEntry{
		String: `EP : neq Exp	<< func() (Attrib, error) {
            semantics.OperatorStack = append(semantics.OperatorStack, 7) // !=
            
            right := semantics.PopOperand()
            left := semantics.PopOperand()
            rightType := semantics.PopType()
            leftType := semantics.PopType()
            op := semantics.PopOperator()
            
            if !semantics.TypeCompatible(leftType, rightType) {
                return nil, fmt.Errorf("EP: tipos incompatibles '%s' y '%s'", leftType, rightType)
            }

            tempAddr := semantics.Memory.Direccionar("temp", "bool")
            temp := semantics.Operand{Addr: tempAddr, Type: "bool"}
            semantics.AddQuadruple(op, left.Addr, right.Addr, tempAddr)

            semantics.PushOperand(temp)
            semantics.PushType("bool")

            return temp, nil
        }() >>`,
		Id:         "EP",
		NTType:     28,
		Index:      43,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            semantics.OperatorStack = append(semantics.OperatorStack, 7) // !=
            
            right := semantics.PopOperand()
            left := semantics.PopOperand()
            rightType := semantics.PopType()
            leftType := semantics.PopType()
            op := semantics.PopOperator()
            
            if !semantics.TypeCompatible(leftType, rightType) {
                return nil, fmt.Errorf("EP: tipos incompatibles '%s' y '%s'", leftType, rightType)
            }

            tempAddr := semantics.Memory.Direccionar("temp", "bool")
            temp := semantics.Operand{Addr: tempAddr, Type: "bool"}
            semantics.AddQuadruple(op, left.Addr, right.Addr, tempAddr)

            semantics.PushOperand(temp)
            semantics.PushType("bool")

            return temp, nil
        }()
		},
	},
	ProdTabEntry{
		String: `Exp : Termino ExpP	<< func() (Attrib, error) {
            if X[1] == nil {
                return X[0], nil
            }
            return X[1], nil
        }() >>`,
		Id:         "Exp",
		NTType:     29,
		Index:      44,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            if X[1] == nil {
                return X[0], nil
            }
            return X[1], nil
        }()
		},
	},
	ProdTabEntry{
		String: `ExpP : empty	<< func() (Attrib, error) {
            return nil, nil
        }() >>`,
		Id:         "ExpP",
		NTType:     30,
		Index:      45,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `ExpP : plus Termino ExpP	<< func() (Attrib, error) {
            semantics.OperatorStack = append(semantics.OperatorStack, 1)
            right := semantics.OperandStack[len(semantics.OperandStack)-1]
            rightType := semantics.TypeStack[len(semantics.TypeStack)-1]
            semantics.OperandStack = semantics.OperandStack[:len(semantics.OperandStack)-1]
            semantics.TypeStack = semantics.TypeStack[:len(semantics.TypeStack)-1]

            left := semantics.OperandStack[len(semantics.OperandStack)-1]
            leftType := semantics.TypeStack[len(semantics.TypeStack)-1]
            semantics.OperandStack = semantics.OperandStack[:len(semantics.OperandStack)-1]
            semantics.TypeStack = semantics.TypeStack[:len(semantics.TypeStack)-1]

            if !semantics.TypeCompatible(leftType, rightType) {
                return nil, fmt.Errorf("ExpP: tipos incompatibles para suma: %s y %s", leftType, rightType)
            }

            op := semantics.OperatorStack[len(semantics.OperatorStack)-1]
            semantics.OperatorStack = semantics.OperatorStack[:len(semantics.OperatorStack)-1]

            resultType, err := semantics.ArithmeticResultType(leftType, rightType)
            if err != nil {
                return nil, err
            }

            resultAddr := semantics.Memory.Direccionar("temp", resultType)

            semantics.AddQuadruple(op, left.Addr, right.Addr, resultAddr)

            semantics.OperandStack = append(semantics.OperandStack, semantics.Operand{Addr: resultAddr})
            semantics.TypeStack = append(semantics.TypeStack, resultType)

            return semantics.Operand{Addr: resultAddr, Type: resultType}, nil
        }() >>`,
		Id:         "ExpP",
		NTType:     30,
		Index:      46,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            semantics.OperatorStack = append(semantics.OperatorStack, 1)
            right := semantics.OperandStack[len(semantics.OperandStack)-1]
            rightType := semantics.TypeStack[len(semantics.TypeStack)-1]
            semantics.OperandStack = semantics.OperandStack[:len(semantics.OperandStack)-1]
            semantics.TypeStack = semantics.TypeStack[:len(semantics.TypeStack)-1]

            left := semantics.OperandStack[len(semantics.OperandStack)-1]
            leftType := semantics.TypeStack[len(semantics.TypeStack)-1]
            semantics.OperandStack = semantics.OperandStack[:len(semantics.OperandStack)-1]
            semantics.TypeStack = semantics.TypeStack[:len(semantics.TypeStack)-1]

            if !semantics.TypeCompatible(leftType, rightType) {
                return nil, fmt.Errorf("ExpP: tipos incompatibles para suma: %s y %s", leftType, rightType)
            }

            op := semantics.OperatorStack[len(semantics.OperatorStack)-1]
            semantics.OperatorStack = semantics.OperatorStack[:len(semantics.OperatorStack)-1]

            resultType, err := semantics.ArithmeticResultType(leftType, rightType)
            if err != nil {
                return nil, err
            }

            resultAddr := semantics.Memory.Direccionar("temp", resultType)

            semantics.AddQuadruple(op, left.Addr, right.Addr, resultAddr)

            semantics.OperandStack = append(semantics.OperandStack, semantics.Operand{Addr: resultAddr})
            semantics.TypeStack = append(semantics.TypeStack, resultType)

            return semantics.Operand{Addr: resultAddr, Type: resultType}, nil
        }()
		},
	},
	ProdTabEntry{
		String: `ExpP : minus Termino ExpP	<< func() (Attrib, error) {
            semantics.OperatorStack = append(semantics.OperatorStack, 2)

            right := semantics.OperandStack[len(semantics.OperandStack)-1]
            rightType := semantics.TypeStack[len(semantics.TypeStack)-1]
            semantics.OperandStack = semantics.OperandStack[:len(semantics.OperandStack)-1]
            semantics.TypeStack = semantics.TypeStack[:len(semantics.TypeStack)-1]

            left := semantics.OperandStack[len(semantics.OperandStack)-1]
            leftType := semantics.TypeStack[len(semantics.TypeStack)-1]
            semantics.OperandStack = semantics.OperandStack[:len(semantics.OperandStack)-1]
            semantics.TypeStack = semantics.TypeStack[:len(semantics.TypeStack)-1]

            if !semantics.TypeCompatible(leftType, rightType) {
                return nil, fmt.Errorf("ExpP: tipos incompatibles para resta: %s y %s", leftType, rightType)
            }

            op := semantics.OperatorStack[len(semantics.OperatorStack)-1]
            semantics.OperatorStack = semantics.OperatorStack[:len(semantics.OperatorStack)-1]

            resultType, err := semantics.ArithmeticResultType(leftType, rightType)
            if err != nil {
                return nil, err
            }

            resultAddr := semantics.Memory.Direccionar("temp", resultType)

            semantics.AddQuadruple(op, left.Addr, right.Addr, resultAddr)

            semantics.OperandStack = append(semantics.OperandStack, semantics.Operand{Addr: resultAddr})
            semantics.TypeStack = append(semantics.TypeStack, resultType)

            return semantics.Operand{Addr: resultAddr, Type: resultType}, nil
        }() >>`,
		Id:         "ExpP",
		NTType:     30,
		Index:      47,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            semantics.OperatorStack = append(semantics.OperatorStack, 2)

            right := semantics.OperandStack[len(semantics.OperandStack)-1]
            rightType := semantics.TypeStack[len(semantics.TypeStack)-1]
            semantics.OperandStack = semantics.OperandStack[:len(semantics.OperandStack)-1]
            semantics.TypeStack = semantics.TypeStack[:len(semantics.TypeStack)-1]

            left := semantics.OperandStack[len(semantics.OperandStack)-1]
            leftType := semantics.TypeStack[len(semantics.TypeStack)-1]
            semantics.OperandStack = semantics.OperandStack[:len(semantics.OperandStack)-1]
            semantics.TypeStack = semantics.TypeStack[:len(semantics.TypeStack)-1]

            if !semantics.TypeCompatible(leftType, rightType) {
                return nil, fmt.Errorf("ExpP: tipos incompatibles para resta: %s y %s", leftType, rightType)
            }

            op := semantics.OperatorStack[len(semantics.OperatorStack)-1]
            semantics.OperatorStack = semantics.OperatorStack[:len(semantics.OperatorStack)-1]

            resultType, err := semantics.ArithmeticResultType(leftType, rightType)
            if err != nil {
                return nil, err
            }

            resultAddr := semantics.Memory.Direccionar("temp", resultType)

            semantics.AddQuadruple(op, left.Addr, right.Addr, resultAddr)

            semantics.OperandStack = append(semantics.OperandStack, semantics.Operand{Addr: resultAddr})
            semantics.TypeStack = append(semantics.TypeStack, resultType)

            return semantics.Operand{Addr: resultAddr, Type: resultType}, nil
        }()
		},
	},
	ProdTabEntry{
		String: `Termino : Factor TP	<< func() (Attrib, error) {
            if X[1] == nil {
                return X[0], nil
            }
           return X[1], nil
        }() >>`,
		Id:         "Termino",
		NTType:     31,
		Index:      48,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            if X[1] == nil {
                return X[0], nil
            }
           return X[1], nil
        }()
		},
	},
	ProdTabEntry{
		String: `TP : empty	<< func() (Attrib, error) {
            return nil, nil
        }() >>`,
		Id:         "TP",
		NTType:     32,
		Index:      49,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `TP : mul Factor TP	<< func() (Attrib, error) {
            semantics.OperatorStack = append(semantics.OperatorStack, 3)

            // Sacar operandos y tipos
            right := semantics.OperandStack[len(semantics.OperandStack)-1]
            semantics.OperandStack = semantics.OperandStack[:len(semantics.OperandStack)-1]
            rightType := semantics.TypeStack[len(semantics.TypeStack)-1]
            semantics.TypeStack = semantics.TypeStack[:len(semantics.TypeStack)-1]

            left := semantics.OperandStack[len(semantics.OperandStack)-1]
            semantics.OperandStack = semantics.OperandStack[:len(semantics.OperandStack)-1]
            leftType := semantics.TypeStack[len(semantics.TypeStack)-1]
            semantics.TypeStack = semantics.TypeStack[:len(semantics.TypeStack)-1]

            // Verificar compatibilidad
            if !semantics.TypeCompatible(leftType, rightType) {
                return nil, fmt.Errorf("tp: mul tipos incompatibles '%s' y '%s'", leftType, rightType)
            }

            resultType, err := semantics.ArithmeticResultType(leftType, rightType)
            if err != nil {
                return nil, err
            }

            // Obtener operador
            op := semantics.OperatorStack[len(semantics.OperatorStack)-1]
            semantics.OperatorStack = semantics.OperatorStack[:len(semantics.OperatorStack)-1]

            // Asignar dirección al resultado
            resultAddr := semantics.Memory.Direccionar("temp", resultType)

            // Crear cuádruplo
            semantics.AddQuadruple(op, left.Addr, right.Addr, resultAddr)

            // Empujar nuevo resultado a los stacks
            semantics.OperandStack = append(semantics.OperandStack, semantics.Operand{Addr: resultAddr})
            semantics.TypeStack = append(semantics.TypeStack, resultType)

            return semantics.Operand{Addr: resultAddr, Type: resultType}, nil
        }() >>`,
		Id:         "TP",
		NTType:     32,
		Index:      50,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            semantics.OperatorStack = append(semantics.OperatorStack, 3)

            // Sacar operandos y tipos
            right := semantics.OperandStack[len(semantics.OperandStack)-1]
            semantics.OperandStack = semantics.OperandStack[:len(semantics.OperandStack)-1]
            rightType := semantics.TypeStack[len(semantics.TypeStack)-1]
            semantics.TypeStack = semantics.TypeStack[:len(semantics.TypeStack)-1]

            left := semantics.OperandStack[len(semantics.OperandStack)-1]
            semantics.OperandStack = semantics.OperandStack[:len(semantics.OperandStack)-1]
            leftType := semantics.TypeStack[len(semantics.TypeStack)-1]
            semantics.TypeStack = semantics.TypeStack[:len(semantics.TypeStack)-1]

            // Verificar compatibilidad
            if !semantics.TypeCompatible(leftType, rightType) {
                return nil, fmt.Errorf("tp: mul tipos incompatibles '%s' y '%s'", leftType, rightType)
            }

            resultType, err := semantics.ArithmeticResultType(leftType, rightType)
            if err != nil {
                return nil, err
            }

            // Obtener operador
            op := semantics.OperatorStack[len(semantics.OperatorStack)-1]
            semantics.OperatorStack = semantics.OperatorStack[:len(semantics.OperatorStack)-1]

            // Asignar dirección al resultado
            resultAddr := semantics.Memory.Direccionar("temp", resultType)

            // Crear cuádruplo
            semantics.AddQuadruple(op, left.Addr, right.Addr, resultAddr)

            // Empujar nuevo resultado a los stacks
            semantics.OperandStack = append(semantics.OperandStack, semantics.Operand{Addr: resultAddr})
            semantics.TypeStack = append(semantics.TypeStack, resultType)

            return semantics.Operand{Addr: resultAddr, Type: resultType}, nil
        }()
		},
	},
	ProdTabEntry{
		String: `TP : div Factor TP	<< func() (Attrib, error) {
            semantics.OperatorStack = append(semantics.OperatorStack, 4)

            // Sacar operandos y tipos
            right := semantics.OperandStack[len(semantics.OperandStack)-1]
            semantics.OperandStack = semantics.OperandStack[:len(semantics.OperandStack)-1]
            rightType := semantics.TypeStack[len(semantics.TypeStack)-1]
            semantics.TypeStack = semantics.TypeStack[:len(semantics.TypeStack)-1]

            left := semantics.OperandStack[len(semantics.OperandStack)-1]
            semantics.OperandStack = semantics.OperandStack[:len(semantics.OperandStack)-1]
            leftType := semantics.TypeStack[len(semantics.TypeStack)-1]
            semantics.TypeStack = semantics.TypeStack[:len(semantics.TypeStack)-1]

            // Verificar compatibilidad
            if !semantics.TypeCompatible(leftType, rightType) {
                return nil, fmt.Errorf("TP: tipos incompatibles '%s' y '%s'", leftType, rightType)
            }

            resultType, err := semantics.ArithmeticResultType(leftType, rightType)
            if err != nil {
                return nil, err
            }

            // Obtener operador
            op := semantics.OperatorStack[len(semantics.OperatorStack)-1]
            semantics.OperatorStack = semantics.OperatorStack[:len(semantics.OperatorStack)-1]

            // Asignar dirección al resultado
            resultAddr := semantics.Memory.Direccionar("temp", resultType)

            // Crear cuádruplo
            semantics.AddQuadruple(op, left.Addr, right.Addr, resultAddr)

            // Empujar nuevo resultado a los stacks
            semantics.OperandStack = append(semantics.OperandStack, semantics.Operand{Addr: resultAddr})
            semantics.TypeStack = append(semantics.TypeStack, resultType)

            return semantics.Operand{Addr: resultAddr, Type: resultType}, nil
        }() >>`,
		Id:         "TP",
		NTType:     32,
		Index:      51,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            semantics.OperatorStack = append(semantics.OperatorStack, 4)

            // Sacar operandos y tipos
            right := semantics.OperandStack[len(semantics.OperandStack)-1]
            semantics.OperandStack = semantics.OperandStack[:len(semantics.OperandStack)-1]
            rightType := semantics.TypeStack[len(semantics.TypeStack)-1]
            semantics.TypeStack = semantics.TypeStack[:len(semantics.TypeStack)-1]

            left := semantics.OperandStack[len(semantics.OperandStack)-1]
            semantics.OperandStack = semantics.OperandStack[:len(semantics.OperandStack)-1]
            leftType := semantics.TypeStack[len(semantics.TypeStack)-1]
            semantics.TypeStack = semantics.TypeStack[:len(semantics.TypeStack)-1]

            // Verificar compatibilidad
            if !semantics.TypeCompatible(leftType, rightType) {
                return nil, fmt.Errorf("TP: tipos incompatibles '%s' y '%s'", leftType, rightType)
            }

            resultType, err := semantics.ArithmeticResultType(leftType, rightType)
            if err != nil {
                return nil, err
            }

            // Obtener operador
            op := semantics.OperatorStack[len(semantics.OperatorStack)-1]
            semantics.OperatorStack = semantics.OperatorStack[:len(semantics.OperatorStack)-1]

            // Asignar dirección al resultado
            resultAddr := semantics.Memory.Direccionar("temp", resultType)

            // Crear cuádruplo
            semantics.AddQuadruple(op, left.Addr, right.Addr, resultAddr)

            // Empujar nuevo resultado a los stacks
            semantics.OperandStack = append(semantics.OperandStack, semantics.Operand{Addr: resultAddr})
            semantics.TypeStack = append(semantics.TypeStack, resultType)

            return semantics.Operand{Addr: resultAddr, Type: resultType}, nil
        }()
		},
	},
	ProdTabEntry{
		String: `Factor : lparen Expresion rparen	<< func() (Attrib, error) {
            return X[1], nil
        }() >>`,
		Id:         "Factor",
		NTType:     33,
		Index:      52,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return X[1], nil
        }()
		},
	},
	ProdTabEntry{
		String: `Factor : FactorP FactorPP	<< func() (Attrib, error) {
            op, ok := X[0].(int)
            operand, ok2 := X[1].(semantics.Operand)
            if !ok2 {
                return nil, fmt.Errorf("factor: operando inválido")
            }

            if !ok {
                // No hubo + o -, simplemente devuelve el operando tal cual
                return operand, nil
            }

            // Solo tiene sentido aplicar cuádruplo si fue '-'
            if op == 2 { // negativo unario
                resultAddr := semantics.Memory.Direccionar("temp", operand.Type)
                semantics.AddQuadruple(op, operand.Addr, -1, resultAddr)

                newOperand := semantics.Operand{
                    Addr: resultAddr,
                    Type: operand.Type,
                }
                semantics.PushOperand(newOperand)

                return newOperand, nil
            }

            // Si es un + unario, no hace nada
            semantics.PushOperand(operand)
            return operand, nil
        }() >>`,
		Id:         "Factor",
		NTType:     33,
		Index:      53,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            op, ok := X[0].(int)
            operand, ok2 := X[1].(semantics.Operand)
            if !ok2 {
                return nil, fmt.Errorf("factor: operando inválido")
            }

            if !ok {
                // No hubo + o -, simplemente devuelve el operando tal cual
                return operand, nil
            }

            // Solo tiene sentido aplicar cuádruplo si fue '-'
            if op == 2 { // negativo unario
                resultAddr := semantics.Memory.Direccionar("temp", operand.Type)
                semantics.AddQuadruple(op, operand.Addr, -1, resultAddr)

                newOperand := semantics.Operand{
                    Addr: resultAddr,
                    Type: operand.Type,
                }
                semantics.PushOperand(newOperand)

                return newOperand, nil
            }

            // Si es un + unario, no hace nada
            semantics.PushOperand(operand)
            return operand, nil
        }()
		},
	},
	ProdTabEntry{
		String: `FactorP : empty	<< func() (Attrib, error) {
            return nil, nil
        }() >>`,
		Id:         "FactorP",
		NTType:     34,
		Index:      54,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `FactorP : plus	<< func() (Attrib, error) {
            return 1, nil
        }() >>`,
		Id:         "FactorP",
		NTType:     34,
		Index:      55,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return 1, nil
        }()
		},
	},
	ProdTabEntry{
		String: `FactorP : minus	<< func() (Attrib, error) {
            return 2, nil
        }() >>`,
		Id:         "FactorP",
		NTType:     34,
		Index:      56,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return 2, nil
        }()
		},
	},
	ProdTabEntry{
		String: `FactorPP : id	<< func() (Attrib, error) {
            tok, ok := X[0].(*token.Token)
            if !ok {
                return nil, fmt.Errorf("factorPP: id inválido")
            }
            name := string(tok.Lit)
            v, err := semantics.LookupVariable(name)
            if err != nil {
                return nil, err
            }
            op := semantics.Operand{
                Type:  v.Type,
                Addr:  v.Address,
                Value: name,
            }

            semantics.PushOperand(op)

            return op, nil
        }() >>`,
		Id:         "FactorPP",
		NTType:     35,
		Index:      57,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            tok, ok := X[0].(*token.Token)
            if !ok {
                return nil, fmt.Errorf("factorPP: id inválido")
            }
            name := string(tok.Lit)
            v, err := semantics.LookupVariable(name)
            if err != nil {
                return nil, err
            }
            op := semantics.Operand{
                Type:  v.Type,
                Addr:  v.Address,
                Value: name,
            }

            semantics.PushOperand(op)

            return op, nil
        }()
		},
	},
	ProdTabEntry{
		String: `FactorPP : CTE	<< func() (Attrib, error) {
            op, ok := X[0].(semantics.Operand)
            if !ok {
                return nil, fmt.Errorf("factorPP: CTE no es Operand")
            }
            semantics.PushOperand(op)

            return op, nil
        }() >>`,
		Id:         "FactorPP",
		NTType:     35,
		Index:      58,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            op, ok := X[0].(semantics.Operand)
            if !ok {
                return nil, fmt.Errorf("factorPP: CTE no es Operand")
            }
            semantics.PushOperand(op)

            return op, nil
        }()
		},
	},
	ProdTabEntry{
		String: `CTE : nums	<< func() (Attrib, error) {
            tok, ok := X[0].(*token.Token)
            if !ok {
                return nil, fmt.Errorf("cte inválida (entero)")
            }
            lit := string(tok.Lit)
            typ := "int"

            addr := semantics.ConstTab.GetOrAddConstant(lit, typ)

            return semantics.Operand{
                Type:  typ,
                Value: lit,
                Addr:  addr,
            }, nil
        }() >>`,
		Id:         "CTE",
		NTType:     36,
		Index:      59,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            tok, ok := X[0].(*token.Token)
            if !ok {
                return nil, fmt.Errorf("cte inválida (entero)")
            }
            lit := string(tok.Lit)
            typ := "int"

            addr := semantics.ConstTab.GetOrAddConstant(lit, typ)

            return semantics.Operand{
                Type:  typ,
                Value: lit,
                Addr:  addr,
            }, nil
        }()
		},
	},
	ProdTabEntry{
		String: `CTE : nums period nums	<< func() (Attrib, error) {
            intTok, ok1 := X[0].(*token.Token)
            fracTok, ok2 := X[2].(*token.Token)
            if !ok1 || !ok2 {
                return nil, fmt.Errorf("cte inválida (flotante)")
            }
            full := string(intTok.Lit) + "." + string(fracTok.Lit)
            typ := "float"

            addr := semantics.ConstTab.GetOrAddConstant(full, typ)

            return semantics.Operand{
                Type:  typ,
                Value: full,
                Addr:  addr,
            }, nil
        }() >>`,
		Id:         "CTE",
		NTType:     36,
		Index:      60,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            intTok, ok1 := X[0].(*token.Token)
            fracTok, ok2 := X[2].(*token.Token)
            if !ok1 || !ok2 {
                return nil, fmt.Errorf("cte inválida (flotante)")
            }
            full := string(intTok.Lit) + "." + string(fracTok.Lit)
            typ := "float"

            addr := semantics.ConstTab.GetOrAddConstant(full, typ)

            return semantics.Operand{
                Type:  typ,
                Value: full,
                Addr:  addr,
            }, nil
        }()
		},
	},
	ProdTabEntry{
		String: `Funcs : FuncsHeader lbracket VarsFuncs Body rbracket semicolon	<< func() (Attrib, error) {
            //Generar cuádruplo ENDFUNC
            semantics.AddQuadruple(15, -1, -1, -1)

            //Guardar el número de variables temporales usadas
            semantics.FunctionDirectory[semantics.CurrentFunction].TempCount = semantics.GetTempCount()

            //Limpiar tabla de variables locales
            return nil, nil
        }() >>`,
		Id:         "Funcs",
		NTType:     37,
		Index:      61,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            //Generar cuádruplo ENDFUNC
            semantics.AddQuadruple(15, -1, -1, -1)

            //Guardar el número de variables temporales usadas
            semantics.FunctionDirectory[semantics.CurrentFunction].TempCount = semantics.GetTempCount()

            //Limpiar tabla de variables locales
            return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `FuncsHeader : void id lparen FuncsParameter rparen	<< func() (Attrib, error) {
            tok, ok := X[1].(*token.Token)
            if !ok {
                return nil, fmt.Errorf("esperaba *token.Token en X[1], obtuve %T", X[1])
            }
            name := string(tok.Lit)
            err := semantics.AddFunction(name, "void")
            if err != nil {
                return nil, err
            }
            semantics.SetCurrentFunction(name) // Cambia el contexto a la función
            semantics.FunctionDirectory[name].StartQuad = len(semantics.Quadruples)
            return nil, nil
        }() >>`,
		Id:         "FuncsHeader",
		NTType:     38,
		Index:      62,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            tok, ok := X[1].(*token.Token)
            if !ok {
                return nil, fmt.Errorf("esperaba *token.Token en X[1], obtuve %T", X[1])
            }
            name := string(tok.Lit)
            err := semantics.AddFunction(name, "void")
            if err != nil {
                return nil, err
            }
            semantics.SetCurrentFunction(name) // Cambia el contexto a la función
            semantics.FunctionDirectory[name].StartQuad = len(semantics.Quadruples)
            return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `FuncsParameter : empty	<< func() (Attrib, error) {
        return nil, nil // no hay parámetros
        }() >>`,
		Id:         "FuncsParameter",
		NTType:     39,
		Index:      63,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        return nil, nil // no hay parámetros
        }()
		},
	},
	ProdTabEntry{
		String: `FuncsParameter : WP	<< func() (Attrib, error) {
            return nil, nil
        }() >>`,
		Id:         "FuncsParameter",
		NTType:     39,
		Index:      64,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `W : empty	<< func() (Attrib, error) {
        return nil, nil
      }() >>`,
		Id:         "W",
		NTType:     40,
		Index:      65,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        return nil, nil
      }()
		},
	},
	ProdTabEntry{
		String: `W : comma WP	<< func() (Attrib, error) {
            return nil, nil 
        }() >>`,
		Id:         "W",
		NTType:     40,
		Index:      66,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return nil, nil 
        }()
		},
	},
	ProdTabEntry{
		String: `WP : id colon Type W	<< func() (Attrib, error) {
        idTok, ok := X[0].(*token.Token)
        if !ok {
            return nil, fmt.Errorf("wP: se esperaba *token.Token en X[0], obtuve %T", X[0])
        }
        typeStr, ok := X[2].(string)
        if !ok {
            return nil, fmt.Errorf("wP: se esperaba string en X[2], obtuve %T", X[2])
        }
        return semantics.AddParameter(string(idTok.Lit), typeStr), nil
    }() >>`,
		Id:         "WP",
		NTType:     41,
		Index:      67,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        idTok, ok := X[0].(*token.Token)
        if !ok {
            return nil, fmt.Errorf("wP: se esperaba *token.Token en X[0], obtuve %T", X[0])
        }
        typeStr, ok := X[2].(string)
        if !ok {
            return nil, fmt.Errorf("wP: se esperaba string en X[2], obtuve %T", X[2])
        }
        return semantics.AddParameter(string(idTok.Lit), typeStr), nil
    }()
		},
	},
	ProdTabEntry{
		String: `VarsFuncs : empty	<<  >>`,
		Id:         "VarsFuncs",
		NTType:     42,
		Index:      68,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `VarsFuncs : Vars	<<  >>`,
		Id:         "VarsFuncs",
		NTType:     42,
		Index:      69,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FCall : FCallID lparen FCallP rparen semicolon	<< func() (Attrib, error) {
            name, ok := X[0].(string)
            if !ok {
                return nil, fmt.Errorf("fCall: se esperaba string como nombre de función, obtuve %T", X[0])
            }

            err := semantics.ValidateFunctionCall(name, X[2])
            if err != nil {
                return nil, err
            }

            // Generar cuádruplo GOSUB (13)
            semantics.AddQuadruple(13, -1, -1, name)

            semantics.CurrentCall = ""

            return nil, nil
        }() >>`,
		Id:         "FCall",
		NTType:     43,
		Index:      70,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            name, ok := X[0].(string)
            if !ok {
                return nil, fmt.Errorf("fCall: se esperaba string como nombre de función, obtuve %T", X[0])
            }

            err := semantics.ValidateFunctionCall(name, X[2])
            if err != nil {
                return nil, err
            }

            // Generar cuádruplo GOSUB (13)
            semantics.AddQuadruple(13, -1, -1, name)

            semantics.CurrentCall = ""

            return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `FCallID : id	<< func() (Attrib, error) {
            idTok, ok := X[0].(*token.Token)
            if !ok {
                return nil, fmt.Errorf("fCall: se esperaba *token.Token en X[0], obtuve %T", X[0])
            }
            name := string(idTok.Lit)
            // ERA = 14
            semantics.AddQuadruple(14, -1, -1, name)

            semantics.FunctionDirectory[name].ParamCount = 0

            semantics.CurrentCall = name

            return name, nil
        }() >>`,
		Id:         "FCallID",
		NTType:     44,
		Index:      71,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            idTok, ok := X[0].(*token.Token)
            if !ok {
                return nil, fmt.Errorf("fCall: se esperaba *token.Token en X[0], obtuve %T", X[0])
            }
            name := string(idTok.Lit)
            // ERA = 14
            semantics.AddQuadruple(14, -1, -1, name)

            semantics.FunctionDirectory[name].ParamCount = 0

            semantics.CurrentCall = name

            return name, nil
        }()
		},
	},
	ProdTabEntry{
		String: `FCallP : empty	<< func() (Attrib, error) {
            return semantics.EmptyArgList()
        }() >>`,
		Id:         "FCallP",
		NTType:     45,
		Index:      72,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return semantics.EmptyArgList()
        }()
		},
	},
	ProdTabEntry{
		String: `FCallP : ZParameters	<< func() (Attrib, error) {
            return X[0], nil
        }() >>`,
		Id:         "FCallP",
		NTType:     45,
		Index:      73,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return X[0], nil
        }()
		},
	},
	ProdTabEntry{
		String: `Z : empty	<< func() (Attrib, error) {
            return semantics.EmptyArgList()
        }() >>`,
		Id:         "Z",
		NTType:     46,
		Index:      74,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return semantics.EmptyArgList()
        }()
		},
	},
	ProdTabEntry{
		String: `Z : comma ZParameters	<< func() (Attrib, error) {
            return X[1], nil
        }() >>`,
		Id:         "Z",
		NTType:     46,
		Index:      75,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return X[1], nil
        }()
		},
	},
	ProdTabEntry{
		String: `ZParameters : Expresion Z	<< func() (Attrib, error) {
            return semantics.AppendArg(X[0], X[1])
        }() >>`,
		Id:         "ZParameters",
		NTType:     47,
		Index:      76,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return semantics.AppendArg(X[0], X[1])
        }()
		},
	},
}
