// Code generated by gocc; DO NOT EDIT.

package parser

import (
	"BabyDuck/semantics"
)

type (
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib, interface{}) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Programa	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Programa : program id semicolon ProgramaP main Body end	<< func() (Attrib, error) {
            err := semantics.AddFunction(X[1], "program")
            if err != nil {
                return nil, err
            }
            semantics.SetCurrentFunction(X[1]) // Cambia el contexto a "program"
            return nil, nil
        }() >>`,
		Id:         "Programa",
		NTType:     1,
		Index:      1,
		NumSymbols: 7,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            err := semantics.AddFunction(X[1], "program")
            if err != nil {
                return nil, err
            }
            semantics.SetCurrentFunction(X[1]) // Cambia el contexto a "program"
            return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `ProgramaP : Vars FP	<<  >>`,
		Id:         "ProgramaP",
		NTType:     2,
		Index:      2,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ProgramaP : FP	<<  >>`,
		Id:         "ProgramaP",
		NTType:     2,
		Index:      3,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FP : Funcs FP	<<  >>`,
		Id:         "FP",
		NTType:     3,
		Index:      4,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FP : empty	<<  >>`,
		Id:         "FP",
		NTType:     3,
		Index:      5,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Vars : var VarsP	<<  >>`,
		Id:         "Vars",
		NTType:     4,
		Index:      6,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `VarsP : id X colon Type semicolon Y	<< func() (Attrib, error) {
            ids := semantics.CollectIDs(X[0], X[1]) // Reúne todos los ids de la declaración
            for _, id := range ids {
                err := semantics.AddVariable(id, X[3])
                if err != nil {
                    return nil, err // Detecta variables doblemente declaradas
                }
            }
            return nil, nil
        }() >>`,
		Id:         "VarsP",
		NTType:     5,
		Index:      7,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            ids := semantics.CollectIDs(X[0], X[1]) // Reúne todos los ids de la declaración
            for _, id := range ids {
                err := semantics.AddVariable(id, X[3])
                if err != nil {
                    return nil, err // Detecta variables doblemente declaradas
                }
            }
            return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `X : comma id X	<< func() (Attrib, error) {
            return semantics.AppendID(X[1], X[2]) // Construye lista de ids
        }() >>`,
		Id:         "X",
		NTType:     6,
		Index:      8,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return semantics.AppendID(X[1], X[2]) // Construye lista de ids
        }()
		},
	},
	ProdTabEntry{
		String: `X : empty	<< func() (Attrib, error) {
            return semantics.EmptyIDList()
        }() >>`,
		Id:         "X",
		NTType:     6,
		Index:      9,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return semantics.EmptyIDList()
        }()
		},
	},
	ProdTabEntry{
		String: `Y : VarsP	<<  >>`,
		Id:         "Y",
		NTType:     7,
		Index:      10,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Y : empty	<<  >>`,
		Id:         "Y",
		NTType:     7,
		Index:      11,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Type : int	<< 0,nil >>`,
		Id:         "Type",
		NTType:     8,
		Index:      12,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return 0,nil
		},
	},
	ProdTabEntry{
		String: `Type : float	<< 0,nil >>`,
		Id:         "Type",
		NTType:     8,
		Index:      13,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return 0,nil
		},
	},
	ProdTabEntry{
		String: `Body : lbrace BodyP rbrace	<<  >>`,
		Id:         "Body",
		NTType:     9,
		Index:      14,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `BodyP : empty	<<  >>`,
		Id:         "BodyP",
		NTType:     10,
		Index:      15,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `BodyP : Statement BodyP	<<  >>`,
		Id:         "BodyP",
		NTType:     10,
		Index:      16,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : Assign	<<  >>`,
		Id:         "Statement",
		NTType:     11,
		Index:      17,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : Condition	<<  >>`,
		Id:         "Statement",
		NTType:     11,
		Index:      18,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : Cycle	<<  >>`,
		Id:         "Statement",
		NTType:     11,
		Index:      19,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : FCall	<<  >>`,
		Id:         "Statement",
		NTType:     11,
		Index:      20,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : Print	<<  >>`,
		Id:         "Statement",
		NTType:     11,
		Index:      21,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Print : print lparen PrintP rparen semicolon	<<  >>`,
		Id:         "Print",
		NTType:     12,
		Index:      22,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `PrintP : string_literal PrintPP	<<  >>`,
		Id:         "PrintP",
		NTType:     13,
		Index:      23,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `PrintPP : empty	<<  >>`,
		Id:         "PrintPP",
		NTType:     14,
		Index:      24,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `PrintPP : PrintP	<<  >>`,
		Id:         "PrintPP",
		NTType:     14,
		Index:      25,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Assign : id assign Expresion semicolon	<<  >>`,
		Id:         "Assign",
		NTType:     15,
		Index:      26,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Cycle : while lparen Expresion rparen do Body semicolon	<<  >>`,
		Id:         "Cycle",
		NTType:     16,
		Index:      27,
		NumSymbols: 7,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Condition : if lparen Expresion rparen Body ConditionP	<<  >>`,
		Id:         "Condition",
		NTType:     17,
		Index:      28,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ConditionP : empty	<<  >>`,
		Id:         "ConditionP",
		NTType:     18,
		Index:      29,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `ConditionP : else Body	<<  >>`,
		Id:         "ConditionP",
		NTType:     18,
		Index:      30,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Expresion : Exp EP	<<  >>`,
		Id:         "Expresion",
		NTType:     19,
		Index:      31,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `EP : empty	<<  >>`,
		Id:         "EP",
		NTType:     20,
		Index:      32,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `EP : gt Exp	<<  >>`,
		Id:         "EP",
		NTType:     20,
		Index:      33,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `EP : lt Exp	<<  >>`,
		Id:         "EP",
		NTType:     20,
		Index:      34,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `EP : neq Exp	<<  >>`,
		Id:         "EP",
		NTType:     20,
		Index:      35,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Exp : Termino ExpP	<<  >>`,
		Id:         "Exp",
		NTType:     21,
		Index:      36,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ExpP : empty	<<  >>`,
		Id:         "ExpP",
		NTType:     22,
		Index:      37,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `ExpP : plus Termino ExpP	<<  >>`,
		Id:         "ExpP",
		NTType:     22,
		Index:      38,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ExpP : minus Termino ExpP	<<  >>`,
		Id:         "ExpP",
		NTType:     22,
		Index:      39,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Termino : Factor TP	<<  >>`,
		Id:         "Termino",
		NTType:     23,
		Index:      40,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `TP : empty	<<  >>`,
		Id:         "TP",
		NTType:     24,
		Index:      41,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `TP : mul Factor TP	<<  >>`,
		Id:         "TP",
		NTType:     24,
		Index:      42,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `TP : div Factor TP	<<  >>`,
		Id:         "TP",
		NTType:     24,
		Index:      43,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Factor : lparen Expresion rparen	<<  >>`,
		Id:         "Factor",
		NTType:     25,
		Index:      44,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Factor : FactorP FactorPP	<<  >>`,
		Id:         "Factor",
		NTType:     25,
		Index:      45,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FactorP : empty	<<  >>`,
		Id:         "FactorP",
		NTType:     26,
		Index:      46,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `FactorP : plus	<<  >>`,
		Id:         "FactorP",
		NTType:     26,
		Index:      47,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FactorP : minus	<<  >>`,
		Id:         "FactorP",
		NTType:     26,
		Index:      48,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FactorPP : id	<<  >>`,
		Id:         "FactorPP",
		NTType:     27,
		Index:      49,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FactorPP : CTE	<<  >>`,
		Id:         "FactorPP",
		NTType:     27,
		Index:      50,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `CTE : nums	<<  >>`,
		Id:         "CTE",
		NTType:     28,
		Index:      51,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `CTE : nums period nums	<<  >>`,
		Id:         "CTE",
		NTType:     28,
		Index:      52,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Funcs : void id lparen FuncsP rparen lbracket VP Body rbracket semicolon	<<  >>`,
		Id:         "Funcs",
		NTType:     29,
		Index:      53,
		NumSymbols: 10,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FuncsP : empty	<<  >>`,
		Id:         "FuncsP",
		NTType:     30,
		Index:      54,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `FuncsP : id colon Type W	<<  >>`,
		Id:         "FuncsP",
		NTType:     30,
		Index:      55,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `W : empty	<<  >>`,
		Id:         "W",
		NTType:     31,
		Index:      56,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `W : comma id colon Type W	<<  >>`,
		Id:         "W",
		NTType:     31,
		Index:      57,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `VP : empty	<<  >>`,
		Id:         "VP",
		NTType:     32,
		Index:      58,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `VP : Vars	<<  >>`,
		Id:         "VP",
		NTType:     32,
		Index:      59,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FCall : id lparen FCallP rparen semicolon	<<  >>`,
		Id:         "FCall",
		NTType:     33,
		Index:      60,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FCallP : empty	<<  >>`,
		Id:         "FCallP",
		NTType:     34,
		Index:      61,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `FCallP : Expresion Z	<<  >>`,
		Id:         "FCallP",
		NTType:     34,
		Index:      62,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Z : empty	<<  >>`,
		Id:         "Z",
		NTType:     35,
		Index:      63,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Z : comma Expresion Z	<<  >>`,
		Id:         "Z",
		NTType:     35,
		Index:      64,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
}
