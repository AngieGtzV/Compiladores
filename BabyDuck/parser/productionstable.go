// Code generated by gocc; DO NOT EDIT.

package parser

import (
	"BabyDuck/semantics"
    "fmt"
	"BabyDuck/token"
)

type (
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib, interface{}) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Programa	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Programa : program id semicolon ProgramaP main Body end	<< func() (Attrib, error) {
            tok, ok := X[1].(*token.Token)
            if !ok {
                return nil, fmt.Errorf("esperaba *token.Token en X[1], obtuve %T", X[1])
            }
            name := string(tok.Lit)

            err := semantics.AddFunction(name, "program")
            if err != nil {
                return nil, err
            }
            err = semantics.SetCurrentFunction(name)
            if err != nil {
                return nil, err
            }
            return nil, nil
        }() >>`,
		Id:         "Programa",
		NTType:     1,
		Index:      1,
		NumSymbols: 7,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            tok, ok := X[1].(*token.Token)
            if !ok {
                return nil, fmt.Errorf("esperaba *token.Token en X[1], obtuve %T", X[1])
            }
            name := string(tok.Lit)

            err := semantics.AddFunction(name, "program")
            if err != nil {
                return nil, err
            }
            err = semantics.SetCurrentFunction(name)
            if err != nil {
                return nil, err
            }
            return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `ProgramaP : Vars FP	<<  >>`,
		Id:         "ProgramaP",
		NTType:     2,
		Index:      2,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ProgramaP : FP	<<  >>`,
		Id:         "ProgramaP",
		NTType:     2,
		Index:      3,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FP : Funcs FP	<<  >>`,
		Id:         "FP",
		NTType:     3,
		Index:      4,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FP : empty	<<  >>`,
		Id:         "FP",
		NTType:     3,
		Index:      5,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Vars : var VarsP	<<  >>`,
		Id:         "Vars",
		NTType:     4,
		Index:      6,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `VarsP : id X colon Type semicolon Y	<< func() (Attrib, error) {
            idTok, ok := X[0].(*token.Token)
            if !ok {
                return nil, fmt.Errorf("varsP: se esperaba *token.Token en X[0], obtuve %T", X[0])
            }
            idList, err := semantics.CollectIDs(string(idTok.Lit), X[1])
            if err != nil {
                return nil, err
            }
            typeStr, ok := X[3].(string)
            if !ok {
                return nil, fmt.Errorf("varsP: se esperaba string en X[3], obtuve %T", X[3])
            }
            for _, id := range idList {
                if err := semantics.AddVariable(id, typeStr); err != nil {
                    return nil, err
                }
            }
            return nil, nil
        }() >>`,
		Id:         "VarsP",
		NTType:     5,
		Index:      7,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            idTok, ok := X[0].(*token.Token)
            if !ok {
                return nil, fmt.Errorf("varsP: se esperaba *token.Token en X[0], obtuve %T", X[0])
            }
            idList, err := semantics.CollectIDs(string(idTok.Lit), X[1])
            if err != nil {
                return nil, err
            }
            typeStr, ok := X[3].(string)
            if !ok {
                return nil, fmt.Errorf("varsP: se esperaba string en X[3], obtuve %T", X[3])
            }
            for _, id := range idList {
                if err := semantics.AddVariable(id, typeStr); err != nil {
                    return nil, err
                }
            }
            return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `X : comma id X	<< func() (Attrib, error) {
        idTok, ok := X[1].(*token.Token)
        if !ok {
            return nil, fmt.Errorf("x: se esperaba *token.Token en X[1], obtuve %T", X[1])
        }
        return semantics.AppendID(string(idTok.Lit), X[2])
    }() >>`,
		Id:         "X",
		NTType:     6,
		Index:      8,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        idTok, ok := X[1].(*token.Token)
        if !ok {
            return nil, fmt.Errorf("x: se esperaba *token.Token en X[1], obtuve %T", X[1])
        }
        return semantics.AppendID(string(idTok.Lit), X[2])
    }()
		},
	},
	ProdTabEntry{
		String: `X : empty	<< func() (Attrib, error) {
            return semantics.EmptyIDList()
        }() >>`,
		Id:         "X",
		NTType:     6,
		Index:      9,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return semantics.EmptyIDList()
        }()
		},
	},
	ProdTabEntry{
		String: `Y : VarsP	<<  >>`,
		Id:         "Y",
		NTType:     7,
		Index:      10,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Y : empty	<<  >>`,
		Id:         "Y",
		NTType:     7,
		Index:      11,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Type : int	<< func() (Attrib, error) {
            return "int", nil
        }() >>`,
		Id:         "Type",
		NTType:     8,
		Index:      12,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return "int", nil
        }()
		},
	},
	ProdTabEntry{
		String: `Type : float	<< func() (Attrib, error) {
            return "float", nil
        }() >>`,
		Id:         "Type",
		NTType:     8,
		Index:      13,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return "float", nil
        }()
		},
	},
	ProdTabEntry{
		String: `Body : lbrace BodyP rbrace	<<  >>`,
		Id:         "Body",
		NTType:     9,
		Index:      14,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `BodyP : empty	<<  >>`,
		Id:         "BodyP",
		NTType:     10,
		Index:      15,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `BodyP : Statement BodyP	<<  >>`,
		Id:         "BodyP",
		NTType:     10,
		Index:      16,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : Assign	<<  >>`,
		Id:         "Statement",
		NTType:     11,
		Index:      17,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : Condition	<<  >>`,
		Id:         "Statement",
		NTType:     11,
		Index:      18,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : Cycle	<<  >>`,
		Id:         "Statement",
		NTType:     11,
		Index:      19,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : FCall	<<  >>`,
		Id:         "Statement",
		NTType:     11,
		Index:      20,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : Print	<<  >>`,
		Id:         "Statement",
		NTType:     11,
		Index:      21,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Print : print lparen PrintP rparen semicolon	<<  >>`,
		Id:         "Print",
		NTType:     12,
		Index:      22,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `PrintP : string_literal PrintPP	<<  >>`,
		Id:         "PrintP",
		NTType:     13,
		Index:      23,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `PrintPP : empty	<<  >>`,
		Id:         "PrintPP",
		NTType:     14,
		Index:      24,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `PrintPP : PrintP	<<  >>`,
		Id:         "PrintPP",
		NTType:     14,
		Index:      25,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Assign : id assign Expresion semicolon	<< func() (Attrib, error) {
            idTok, ok := X[0].(*token.Token)
            if !ok {
                return nil, fmt.Errorf("assign: se esperaba *token.Token en X[0], obtuve %T", X[0])
            }
            varInfo, err := semantics.LookupVariable(string(idTok.Lit))
            if err != nil {
                return nil, err
            }
            if !semantics.TypeCompatible(varInfo.Type, X[2]) {
                return nil, fmt.Errorf("assign: tipos incompatibles en la asignación")
            }
            return nil, nil
        }() >>`,
		Id:         "Assign",
		NTType:     15,
		Index:      26,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            idTok, ok := X[0].(*token.Token)
            if !ok {
                return nil, fmt.Errorf("assign: se esperaba *token.Token en X[0], obtuve %T", X[0])
            }
            varInfo, err := semantics.LookupVariable(string(idTok.Lit))
            if err != nil {
                return nil, err
            }
            if !semantics.TypeCompatible(varInfo.Type, X[2]) {
                return nil, fmt.Errorf("assign: tipos incompatibles en la asignación")
            }
            return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `Cycle : while lparen Expresion rparen do Body semicolon	<<  >>`,
		Id:         "Cycle",
		NTType:     16,
		Index:      27,
		NumSymbols: 7,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Condition : if lparen Expresion rparen Body ConditionP	<<  >>`,
		Id:         "Condition",
		NTType:     17,
		Index:      28,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ConditionP : empty	<<  >>`,
		Id:         "ConditionP",
		NTType:     18,
		Index:      29,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `ConditionP : else Body	<<  >>`,
		Id:         "ConditionP",
		NTType:     18,
		Index:      30,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Expresion : Exp EP	<< func() (Attrib, error) {
            if X[1] == nil {
                return X[0], nil
            }
            leftType, ok1 := X[0].(string)
            rightType, ok2 := X[1].(string)
            if !ok1 || !ok2 {
                return nil, fmt.Errorf("expresion: tipos inválidos")
            }
            if !semantics.TypeCompatible(leftType, rightType) {
                return nil, fmt.Errorf("expresion: tipos incompatibles '%s' y '%s'", leftType, rightType)
            }
            return "int", nil // resultado de una comparación
        }() >>`,
		Id:         "Expresion",
		NTType:     19,
		Index:      31,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            if X[1] == nil {
                return X[0], nil
            }
            leftType, ok1 := X[0].(string)
            rightType, ok2 := X[1].(string)
            if !ok1 || !ok2 {
                return nil, fmt.Errorf("expresion: tipos inválidos")
            }
            if !semantics.TypeCompatible(leftType, rightType) {
                return nil, fmt.Errorf("expresion: tipos incompatibles '%s' y '%s'", leftType, rightType)
            }
            return "int", nil // resultado de una comparación
        }()
		},
	},
	ProdTabEntry{
		String: `EP : empty	<< func() (Attrib, error) {
            return nil, nil
        }() >>`,
		Id:         "EP",
		NTType:     20,
		Index:      32,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `EP : gt Exp	<< func() (Attrib, error) {
            return X[1], nil
        }() >>`,
		Id:         "EP",
		NTType:     20,
		Index:      33,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return X[1], nil
        }()
		},
	},
	ProdTabEntry{
		String: `EP : lt Exp	<< func() (Attrib, error) {
            return X[1], nil
        }() >>`,
		Id:         "EP",
		NTType:     20,
		Index:      34,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return X[1], nil
        }()
		},
	},
	ProdTabEntry{
		String: `EP : neq Exp	<< func() (Attrib, error) {
            return X[1], nil
        }() >>`,
		Id:         "EP",
		NTType:     20,
		Index:      35,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return X[1], nil
        }()
		},
	},
	ProdTabEntry{
		String: `Exp : Termino ExpP	<< func() (Attrib, error) {
            if X[1] == nil {
                return X[0], nil
            }
            return semantics.ArithmeticResultType(X[0].(string), X[1].(string))
        }() >>`,
		Id:         "Exp",
		NTType:     21,
		Index:      36,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            if X[1] == nil {
                return X[0], nil
            }
            return semantics.ArithmeticResultType(X[0].(string), X[1].(string))
        }()
		},
	},
	ProdTabEntry{
		String: `ExpP : empty	<< func() (Attrib, error) {
            return nil, nil
        }() >>`,
		Id:         "ExpP",
		NTType:     22,
		Index:      37,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `ExpP : plus Termino ExpP	<< func() (Attrib, error) {
            if X[2] == nil {
                return X[1], nil
            }
            return semantics.ArithmeticResultType(X[1].(string), X[2].(string))
        }() >>`,
		Id:         "ExpP",
		NTType:     22,
		Index:      38,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            if X[2] == nil {
                return X[1], nil
            }
            return semantics.ArithmeticResultType(X[1].(string), X[2].(string))
        }()
		},
	},
	ProdTabEntry{
		String: `ExpP : minus Termino ExpP	<< func() (Attrib, error) {
            if X[2] == nil {
                return X[1], nil
            }
            return semantics.ArithmeticResultType(X[1].(string), X[2].(string))
        }() >>`,
		Id:         "ExpP",
		NTType:     22,
		Index:      39,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            if X[2] == nil {
                return X[1], nil
            }
            return semantics.ArithmeticResultType(X[1].(string), X[2].(string))
        }()
		},
	},
	ProdTabEntry{
		String: `Termino : Factor TP	<< func() (Attrib, error) {
            if X[1] == nil {
                return X[0], nil
            }
            return semantics.ArithmeticResultType(X[0].(string), X[1].(string))
        }() >>`,
		Id:         "Termino",
		NTType:     23,
		Index:      40,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            if X[1] == nil {
                return X[0], nil
            }
            return semantics.ArithmeticResultType(X[0].(string), X[1].(string))
        }()
		},
	},
	ProdTabEntry{
		String: `TP : empty	<< func() (Attrib, error) {
            return nil, nil
        }() >>`,
		Id:         "TP",
		NTType:     24,
		Index:      41,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `TP : mul Factor TP	<< func() (Attrib, error) {
            if X[2] == nil {
                return X[1], nil
            }
            return semantics.ArithmeticResultType(X[1].(string), X[2].(string))
        }() >>`,
		Id:         "TP",
		NTType:     24,
		Index:      42,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            if X[2] == nil {
                return X[1], nil
            }
            return semantics.ArithmeticResultType(X[1].(string), X[2].(string))
        }()
		},
	},
	ProdTabEntry{
		String: `TP : div Factor TP	<< func() (Attrib, error) {
            if X[2] == nil {
                return X[1], nil
            }
            return semantics.ArithmeticResultType(X[1].(string), X[2].(string))
        }() >>`,
		Id:         "TP",
		NTType:     24,
		Index:      43,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            if X[2] == nil {
                return X[1], nil
            }
            return semantics.ArithmeticResultType(X[1].(string), X[2].(string))
        }()
		},
	},
	ProdTabEntry{
		String: `Factor : lparen Expresion rparen	<< func() (Attrib, error) {
            return X[1], nil
        }() >>`,
		Id:         "Factor",
		NTType:     25,
		Index:      44,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return X[1], nil
        }()
		},
	},
	ProdTabEntry{
		String: `Factor : FactorP FactorPP	<< func() (Attrib, error) {
            // Puedes ignorar el signo para efectos de tipo
            return X[1], nil
        }() >>`,
		Id:         "Factor",
		NTType:     25,
		Index:      45,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            // Puedes ignorar el signo para efectos de tipo
            return X[1], nil
        }()
		},
	},
	ProdTabEntry{
		String: `FactorP : empty	<< func() (Attrib, error) {
            return nil, nil
        }() >>`,
		Id:         "FactorP",
		NTType:     26,
		Index:      46,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `FactorP : plus	<< func() (Attrib, error) {
            return nil, nil // signo no cambia tipo
        }() >>`,
		Id:         "FactorP",
		NTType:     26,
		Index:      47,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return nil, nil // signo no cambia tipo
        }()
		},
	},
	ProdTabEntry{
		String: `FactorP : minus	<< func() (Attrib, error) {
            return nil, nil // signo no cambia tipo
        }() >>`,
		Id:         "FactorP",
		NTType:     26,
		Index:      48,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return nil, nil // signo no cambia tipo
        }()
		},
	},
	ProdTabEntry{
		String: `FactorPP : id	<< func() (Attrib, error) {
            name, ok := X[0].(string)
            if !ok {
                return nil, fmt.Errorf("FactorPP: id no es string")
            }
            v, err := semantics.LookupVariable(name)
            if err != nil {
                return nil, err
            }
            return v.Type, nil
        }() >>`,
		Id:         "FactorPP",
		NTType:     27,
		Index:      49,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            name, ok := X[0].(string)
            if !ok {
                return nil, fmt.Errorf("FactorPP: id no es string")
            }
            v, err := semantics.LookupVariable(name)
            if err != nil {
                return nil, err
            }
            return v.Type, nil
        }()
		},
	},
	ProdTabEntry{
		String: `FactorPP : CTE	<< func() (Attrib, error) {
            return X[0], nil // ya es el tipo ("int" o "float")
        }() >>`,
		Id:         "FactorPP",
		NTType:     27,
		Index:      50,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return X[0], nil // ya es el tipo ("int" o "float")
        }()
		},
	},
	ProdTabEntry{
		String: `CTE : nums	<< func() (Attrib, error) {
            tok, ok := X[0].(*token.Token)
            if !ok {
                return nil, fmt.Errorf("cte inválida (entero)")
            }
            lit := string(tok.Lit)
            return semantics.GetLiteralType(lit), nil
        }() >>`,
		Id:         "CTE",
		NTType:     28,
		Index:      51,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            tok, ok := X[0].(*token.Token)
            if !ok {
                return nil, fmt.Errorf("cte inválida (entero)")
            }
            lit := string(tok.Lit)
            return semantics.GetLiteralType(lit), nil
        }()
		},
	},
	ProdTabEntry{
		String: `CTE : nums period nums	<< func() (Attrib, error) {
            intTok, ok1 := X[0].(*token.Token)
            fracTok, ok2 := X[2].(*token.Token)
            if !ok1 || !ok2 {
                return nil, fmt.Errorf("cte inválida (flotante)")
            }
            full := string(intTok.Lit) + "." + string(fracTok.Lit)
            return semantics.GetLiteralType(full), nil
        }() >>`,
		Id:         "CTE",
		NTType:     28,
		Index:      52,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            intTok, ok1 := X[0].(*token.Token)
            fracTok, ok2 := X[2].(*token.Token)
            if !ok1 || !ok2 {
                return nil, fmt.Errorf("cte inválida (flotante)")
            }
            full := string(intTok.Lit) + "." + string(fracTok.Lit)
            return semantics.GetLiteralType(full), nil
        }()
		},
	},
	ProdTabEntry{
		String: `Funcs : void id lparen FuncsP rparen lbracket VP Body rbracket semicolon	<< func() (Attrib, error) {
            tok, ok := X[1].(*token.Token)
            if !ok {
                return nil, fmt.Errorf("esperaba *token.Token en X[1], obtuve %T", X[1])
            }
            name := string(tok.Lit)
            err := semantics.AddFunction(name, "void")
            if err != nil {
                return nil, err
            }
            semantics.SetCurrentFunction(name) // Cambia el contexto a la función
            return nil, nil
        }() >>`,
		Id:         "Funcs",
		NTType:     29,
		Index:      53,
		NumSymbols: 10,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            tok, ok := X[1].(*token.Token)
            if !ok {
                return nil, fmt.Errorf("esperaba *token.Token en X[1], obtuve %T", X[1])
            }
            name := string(tok.Lit)
            err := semantics.AddFunction(name, "void")
            if err != nil {
                return nil, err
            }
            semantics.SetCurrentFunction(name) // Cambia el contexto a la función
            return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `FuncsP : empty	<< func() (Attrib, error) {
        return nil, nil // no hay parámetros
        }() >>`,
		Id:         "FuncsP",
		NTType:     30,
		Index:      54,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        return nil, nil // no hay parámetros
        }()
		},
	},
	ProdTabEntry{
		String: `FuncsP : WP	<< func() (Attrib, error) {
            return nil, nil // parámetros ya se agregan en WP
        }() >>`,
		Id:         "FuncsP",
		NTType:     30,
		Index:      55,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return nil, nil // parámetros ya se agregan en WP
        }()
		},
	},
	ProdTabEntry{
		String: `W : empty	<< func() (Attrib, error) {
        return nil, nil
      }() >>`,
		Id:         "W",
		NTType:     31,
		Index:      56,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        return nil, nil
      }()
		},
	},
	ProdTabEntry{
		String: `W : comma WP	<< func() (Attrib, error) {
            return nil, nil // ya agregados en WP
        }() >>`,
		Id:         "W",
		NTType:     31,
		Index:      57,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return nil, nil // ya agregados en WP
        }()
		},
	},
	ProdTabEntry{
		String: `WP : id colon Type W	<< func() (Attrib, error) {
        idTok, ok := X[0].(*token.Token)
        if !ok {
            return nil, fmt.Errorf("wP: se esperaba *token.Token en X[0], obtuve %T", X[0])
        }
        typeStr, ok := X[2].(string)
        if !ok {
            return nil, fmt.Errorf("wP: se esperaba string en X[2], obtuve %T", X[2])
        }
        return semantics.AddParameter(string(idTok.Lit), typeStr), nil
    }() >>`,
		Id:         "WP",
		NTType:     32,
		Index:      58,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        idTok, ok := X[0].(*token.Token)
        if !ok {
            return nil, fmt.Errorf("wP: se esperaba *token.Token en X[0], obtuve %T", X[0])
        }
        typeStr, ok := X[2].(string)
        if !ok {
            return nil, fmt.Errorf("wP: se esperaba string en X[2], obtuve %T", X[2])
        }
        return semantics.AddParameter(string(idTok.Lit), typeStr), nil
    }()
		},
	},
	ProdTabEntry{
		String: `VP : empty	<<  >>`,
		Id:         "VP",
		NTType:     33,
		Index:      59,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `VP : Vars	<<  >>`,
		Id:         "VP",
		NTType:     33,
		Index:      60,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FCall : id lparen FCallP rparen semicolon	<< func() (Attrib, error) {
            idTok, ok := X[0].(*token.Token)
            if !ok {
                return nil, fmt.Errorf("fCall: se esperaba *token.Token en X[0], obtuve %T", X[0])
            }
            return semantics.ValidateFunctionCall(string(idTok.Lit), X[2]), nil
        }() >>`,
		Id:         "FCall",
		NTType:     34,
		Index:      61,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            idTok, ok := X[0].(*token.Token)
            if !ok {
                return nil, fmt.Errorf("fCall: se esperaba *token.Token en X[0], obtuve %T", X[0])
            }
            return semantics.ValidateFunctionCall(string(idTok.Lit), X[2]), nil
        }()
		},
	},
	ProdTabEntry{
		String: `FCallP : empty	<< func() (Attrib, error) {
            return semantics.EmptyArgList()
        }() >>`,
		Id:         "FCallP",
		NTType:     35,
		Index:      62,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return semantics.EmptyArgList()
        }()
		},
	},
	ProdTabEntry{
		String: `FCallP : Expresion Z	<< func() (Attrib, error) {
            return semantics.BuildArgList(X[0], X[1])
        }() >>`,
		Id:         "FCallP",
		NTType:     35,
		Index:      63,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return semantics.BuildArgList(X[0], X[1])
        }()
		},
	},
	ProdTabEntry{
		String: `Z : empty	<< func() (Attrib, error) {
            return semantics.EmptyArgList()
        }() >>`,
		Id:         "Z",
		NTType:     36,
		Index:      64,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return semantics.EmptyArgList()
        }()
		},
	},
	ProdTabEntry{
		String: `Z : comma Expresion Z	<< func() (Attrib, error) {
            return semantics.AppendArg(X[1], X[2])
        }() >>`,
		Id:         "Z",
		NTType:     36,
		Index:      65,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            return semantics.AppendArg(X[1], X[2])
        }()
		},
	},
}
