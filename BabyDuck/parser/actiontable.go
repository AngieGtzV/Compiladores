// Code generated by gocc; DO NOT EDIT.

package parser

type (
	actionTable [numStates]actionRow
	actionRow   struct {
		canRecover bool
		actions    [numSymbols]action
	}
)

var actionTab = actionTable{
	actionRow{ // S0
		canRecover: false,
		actions: [numSymbols]action{
			nil,      // INVALID
			nil,      // ␚
			nil,      // end
			shift(3), // program
			nil,      // id
			nil,      // semicolon
			nil,      // main
			nil,      // empty
			nil,      // var
			nil,      // colon
			nil,      // comma
			nil,      // int
			nil,      // float
			nil,      // lbrace
			nil,      // rbrace
			nil,      // print
			nil,      // lparen
			nil,      // rparen
			nil,      // string_literal
			nil,      // assign
			nil,      // do
			nil,      // while
			nil,      // if
			nil,      // else
			nil,      // gt
			nil,      // lt
			nil,      // neq
			nil,      // plus
			nil,      // minus
			nil,      // mul
			nil,      // div
			nil,      // nums
			nil,      // period
			nil,      // lbracket
			nil,      // rbracket
			nil,      // void
		},
	},
	actionRow{ // S1
		canRecover: false,
		actions: [numSymbols]action{
			nil,          // INVALID
			accept(true), // ␚
			nil,          // end
			nil,          // program
			nil,          // id
			nil,          // semicolon
			nil,          // main
			nil,          // empty
			nil,          // var
			nil,          // colon
			nil,          // comma
			nil,          // int
			nil,          // float
			nil,          // lbrace
			nil,          // rbrace
			nil,          // print
			nil,          // lparen
			nil,          // rparen
			nil,          // string_literal
			nil,          // assign
			nil,          // do
			nil,          // while
			nil,          // if
			nil,          // else
			nil,          // gt
			nil,          // lt
			nil,          // neq
			nil,          // plus
			nil,          // minus
			nil,          // mul
			nil,          // div
			nil,          // nums
			nil,          // period
			nil,          // lbracket
			nil,          // rbracket
			nil,          // void
		},
	},
	actionRow{ // S2
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			nil,       // id
			nil,       // semicolon
			reduce(8), // main, reduce: FP
			nil,       // empty
			shift(8),  // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			nil,       // lbrace
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			shift(10), // void
		},
	},
	actionRow{ // S3
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			shift(11), // id
			nil,       // semicolon
			nil,       // main
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			nil,       // lbrace
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S4
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			nil,       // id
			nil,       // semicolon
			shift(13), // main
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			nil,       // lbrace
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S5
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			nil,       // id
			nil,       // semicolon
			reduce(8), // main, reduce: FP
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			nil,       // lbrace
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			shift(10), // void
		},
	},
	actionRow{ // S6
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			nil,       // id
			nil,       // semicolon
			reduce(6), // main, reduce: ProgramaP
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			nil,       // lbrace
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S7
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			nil,       // id
			nil,       // semicolon
			reduce(8), // main, reduce: FP
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			nil,       // lbrace
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			shift(10), // void
		},
	},
	actionRow{ // S8
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			shift(16), // id
			nil,       // semicolon
			nil,       // main
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			nil,       // lbrace
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S9
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			nil,       // id
			nil,       // semicolon
			nil,       // main
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			nil,       // lbrace
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			shift(18), // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S10
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			shift(19), // id
			nil,       // semicolon
			nil,       // main
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			nil,       // lbrace
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S11
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			nil,       // id
			shift(20), // semicolon
			nil,       // main
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			nil,       // lbrace
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S12
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			shift(21), // end
			nil,       // program
			nil,       // id
			nil,       // semicolon
			nil,       // main
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			nil,       // lbrace
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S13
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			nil,       // id
			nil,       // semicolon
			nil,       // main
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			reduce(4), // lbrace, reduce: MainStart
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S14
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			nil,       // id
			nil,       // semicolon
			reduce(5), // main, reduce: ProgramaP
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			nil,       // lbrace
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S15
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			nil,       // id
			nil,       // semicolon
			reduce(7), // main, reduce: FP
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			nil,       // lbrace
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S16
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			reduce(12), // colon, reduce: X
			shift(24),  // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S17
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			nil,       // id
			nil,       // semicolon
			reduce(9), // main, reduce: Vars
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			nil,       // lbrace
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			reduce(9), // void, reduce: Vars
		},
	},
	actionRow{ // S18
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			shift(26),  // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			reduce(69), // lbrace, reduce: VarsFuncs
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S19
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			nil,       // id
			nil,       // semicolon
			nil,       // main
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			nil,       // lbrace
			nil,       // rbrace
			nil,       // print
			shift(28), // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S20
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			nil,       // id
			nil,       // semicolon
			reduce(2), // main, reduce: ProgramaHeader
			nil,       // empty
			reduce(2), // var, reduce: ProgramaHeader
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			nil,       // lbrace
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			reduce(2), // void, reduce: ProgramaHeader
		},
	},
	actionRow{ // S21
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(1), // ␚, reduce: Programa
			nil,       // end
			nil,       // program
			nil,       // id
			nil,       // semicolon
			nil,       // main
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			nil,       // lbrace
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S22
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			nil,       // id
			nil,       // semicolon
			nil,       // main
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			shift(30), // lbrace
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S23
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			nil,       // id
			nil,       // semicolon
			nil,       // main
			nil,       // empty
			nil,       // var
			shift(31), // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			nil,       // lbrace
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S24
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			shift(32), // id
			nil,       // semicolon
			nil,       // main
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			nil,       // lbrace
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S25
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			reduce(70), // lbrace, reduce: VarsFuncs
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S26
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			shift(33), // id
			nil,       // semicolon
			nil,       // main
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			nil,       // lbrace
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S27
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			nil,       // id
			nil,       // semicolon
			nil,       // main
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			shift(36), // lbrace
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S28
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			shift(37),  // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(64), // rparen, reduce: FuncsParameter
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S29
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			reduce(3), // end, reduce: ProgramaMain
			nil,       // program
			nil,       // id
			nil,       // semicolon
			nil,       // main
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			nil,       // lbrace
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S30
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			shift(40),  // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			reduce(18), // rbrace, reduce: BodyP
			shift(48),  // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			shift(51),  // while
			shift(53),  // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S31
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			nil,       // id
			nil,       // semicolon
			nil,       // main
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			shift(56), // int
			shift(57), // float
			nil,       // lbrace
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S32
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			reduce(12), // colon, reduce: X
			shift(24),  // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S33
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			reduce(12), // colon, reduce: X
			shift(24),  // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S34
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			nil,       // id
			nil,       // semicolon
			nil,       // main
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			reduce(9), // lbrace, reduce: Vars
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S35
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			nil,       // id
			nil,       // semicolon
			nil,       // main
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			nil,       // lbrace
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			shift(60), // rbracket
			nil,       // void
		},
	},
	actionRow{ // S36
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			shift(40),  // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			reduce(18), // rbrace, reduce: BodyP
			shift(48),  // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			shift(51),  // while
			shift(53),  // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S37
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			nil,       // id
			nil,       // semicolon
			nil,       // main
			nil,       // empty
			nil,       // var
			shift(62), // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			nil,       // lbrace
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S38
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			nil,       // id
			nil,       // semicolon
			nil,       // main
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			nil,       // lbrace
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			shift(63), // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S39
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(65), // rparen, reduce: FuncsParameter
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S40
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			reduce(72), // lparen, reduce: FCallID
			nil,        // rparen
			nil,        // string_literal
			shift(64),  // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S41
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			nil,       // id
			nil,       // semicolon
			nil,       // main
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			nil,       // lbrace
			shift(65), // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S42
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			shift(40),  // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			reduce(18), // rbrace, reduce: BodyP
			shift(48),  // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			shift(51),  // while
			shift(53),  // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S43
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(20), // id, reduce: Statement
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			reduce(20), // rbrace, reduce: Statement
			reduce(20), // print, reduce: Statement
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			reduce(20), // while, reduce: Statement
			reduce(20), // if, reduce: Statement
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S44
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(21), // id, reduce: Statement
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			reduce(21), // rbrace, reduce: Statement
			reduce(21), // print, reduce: Statement
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			reduce(21), // while, reduce: Statement
			reduce(21), // if, reduce: Statement
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S45
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(22), // id, reduce: Statement
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			reduce(22), // rbrace, reduce: Statement
			reduce(22), // print, reduce: Statement
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			reduce(22), // while, reduce: Statement
			reduce(22), // if, reduce: Statement
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S46
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(23), // id, reduce: Statement
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			reduce(23), // rbrace, reduce: Statement
			reduce(23), // print, reduce: Statement
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			reduce(23), // while, reduce: Statement
			reduce(23), // if, reduce: Statement
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S47
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(24), // id, reduce: Statement
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			reduce(24), // rbrace, reduce: Statement
			reduce(24), // print, reduce: Statement
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			reduce(24), // while, reduce: Statement
			reduce(24), // if, reduce: Statement
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S48
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			nil,       // id
			nil,       // semicolon
			nil,       // main
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			nil,       // lbrace
			nil,       // rbrace
			nil,       // print
			shift(67), // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S49
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			nil,       // id
			nil,       // semicolon
			nil,       // main
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			nil,       // lbrace
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			shift(68), // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S50
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			nil,       // id
			nil,       // semicolon
			nil,       // main
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			nil,       // lbrace
			nil,       // rbrace
			nil,       // print
			shift(69), // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S51
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			reduce(33), // lparen, reduce: WhileStart
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S52
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			nil,       // id
			nil,       // semicolon
			nil,       // main
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			shift(71), // lbrace
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S53
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			nil,       // id
			nil,       // semicolon
			nil,       // main
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			nil,       // lbrace
			nil,       // rbrace
			nil,       // print
			shift(72), // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S54
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			nil,       // id
			nil,       // semicolon
			nil,       // main
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			nil,       // lbrace
			nil,       // rbrace
			nil,       // print
			shift(73), // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S55
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			nil,       // id
			shift(74), // semicolon
			nil,       // main
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			nil,       // lbrace
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S56
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(15), // semicolon, reduce: Type
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S57
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(16), // semicolon, reduce: Type
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S58
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			reduce(11), // colon, reduce: X
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S59
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			nil,       // id
			nil,       // semicolon
			nil,       // main
			nil,       // empty
			nil,       // var
			shift(75), // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			nil,       // lbrace
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S60
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			nil,       // id
			shift(76), // semicolon
			nil,       // main
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			nil,       // lbrace
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S61
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			nil,       // id
			nil,       // semicolon
			nil,       // main
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			nil,       // lbrace
			shift(77), // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S62
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			nil,       // id
			nil,       // semicolon
			nil,       // main
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			shift(79), // int
			shift(80), // float
			nil,       // lbrace
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S63
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			reduce(63), // lbracket, reduce: FuncsHeader
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S64
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(81),  // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S65
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			reduce(17), // end, reduce: Body
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S66
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			reduce(19), // rbrace, reduce: BodyP
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S67
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(89),  // lparen
			nil,        // rparen
			shift(91),  // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S68
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			nil,       // id
			nil,       // semicolon
			nil,       // main
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			shift(98), // lbrace
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S69
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(99),  // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S70
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(37), // semicolon, reduce: ConditionP
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			shift(107), // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S71
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			shift(40),  // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			reduce(18), // rbrace, reduce: BodyP
			shift(48),  // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			shift(51),  // while
			shift(53),  // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S72
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(99),  // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S73
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(89),  // lparen
			reduce(73), // rparen, reduce: FCallP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S74
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			shift(16),  // id
			nil,        // semicolon
			reduce(14), // main, reduce: Y
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			reduce(14), // void, reduce: Y
		},
	},
	actionRow{ // S75
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			nil,       // id
			nil,       // semicolon
			nil,       // main
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			shift(56), // int
			shift(57), // float
			nil,       // lbrace
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S76
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			reduce(62), // main, reduce: Funcs
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			reduce(62), // void, reduce: Funcs
		},
	},
	actionRow{ // S77
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			reduce(17), // rbracket, reduce: Body
			nil,        // void
		},
	},
	actionRow{ // S78
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			shift(116), // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(66), // rparen, reduce: W
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S79
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(15), // comma, reduce: Type
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(15), // rparen, reduce: Type
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S80
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(16), // comma, reduce: Type
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(16), // rparen, reduce: Type
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S81
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(99),  // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S82
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			shift(119), // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S83
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(41), // semicolon, reduce: EP
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			shift(121), // gt
			shift(122), // lt
			shift(123), // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S84
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(46), // semicolon, reduce: ExpP
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(46), // gt, reduce: ExpP
			reduce(46), // lt, reduce: ExpP
			reduce(46), // neq, reduce: ExpP
			shift(125), // plus
			shift(126), // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S85
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(56), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			reduce(56), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S86
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(57), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			reduce(57), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S87
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(50), // semicolon, reduce: TP
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(50), // gt, reduce: TP
			reduce(50), // lt, reduce: TP
			reduce(50), // neq, reduce: TP
			reduce(50), // plus, reduce: TP
			reduce(50), // minus, reduce: TP
			shift(128), // mul
			shift(129), // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S88
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			shift(130), // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			shift(133), // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S89
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(99),  // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S90
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			shift(135), // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S91
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			shift(136), // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(28), // rparen, reduce: PrintPP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S92
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			shift(136), // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(28), // rparen, reduce: PrintPP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S93
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(41), // comma, reduce: EP
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(41), // rparen, reduce: EP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			shift(140), // gt
			shift(141), // lt
			shift(142), // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S94
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(46), // comma, reduce: ExpP
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(46), // rparen, reduce: ExpP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(46), // gt, reduce: ExpP
			reduce(46), // lt, reduce: ExpP
			reduce(46), // neq, reduce: ExpP
			shift(144), // plus
			shift(145), // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S95
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(50), // comma, reduce: TP
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(50), // rparen, reduce: TP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(50), // gt, reduce: TP
			reduce(50), // lt, reduce: TP
			reduce(50), // neq, reduce: TP
			reduce(50), // plus, reduce: TP
			reduce(50), // minus, reduce: TP
			shift(147), // mul
			shift(148), // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S96
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			shift(149), // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			shift(152), // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S97
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			shift(153), // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S98
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			shift(40),  // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			reduce(18), // rbrace, reduce: BodyP
			shift(48),  // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			shift(51),  // while
			shift(53),  // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S99
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(99),  // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S100
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			shift(156), // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S101
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(41), // rparen, reduce: EP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			shift(158), // gt
			shift(159), // lt
			shift(160), // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S102
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(46), // rparen, reduce: ExpP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(46), // gt, reduce: ExpP
			reduce(46), // lt, reduce: ExpP
			reduce(46), // neq, reduce: ExpP
			shift(162), // plus
			shift(163), // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S103
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(50), // rparen, reduce: TP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(50), // gt, reduce: TP
			reduce(50), // lt, reduce: TP
			reduce(50), // neq, reduce: TP
			reduce(50), // plus, reduce: TP
			reduce(50), // minus, reduce: TP
			shift(165), // mul
			shift(166), // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S104
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			shift(167), // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			shift(170), // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S105
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			shift(171), // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S106
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			nil,       // id
			nil,       // semicolon
			nil,       // main
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			shift(98), // lbrace
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S107
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			reduce(38), // lbrace, reduce: ElseJump
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S108
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			shift(173), // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S109
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			shift(174), // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S110
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			shift(175), // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(75), // rparen, reduce: Z
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S111
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			shift(177), // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S112
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(74), // rparen, reduce: FCallP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S113
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			reduce(13), // main, reduce: Y
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			reduce(13), // void, reduce: Y
		},
	},
	actionRow{ // S114
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			reduce(10), // main, reduce: VarsP
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			reduce(10), // void, reduce: VarsP
		},
	},
	actionRow{ // S115
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			shift(178), // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S116
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // end
			nil,       // program
			shift(37), // id
			nil,       // semicolon
			nil,       // main
			nil,       // empty
			nil,       // var
			nil,       // colon
			nil,       // comma
			nil,       // int
			nil,       // float
			nil,       // lbrace
			nil,       // rbrace
			nil,       // print
			nil,       // lparen
			nil,       // rparen
			nil,       // string_literal
			nil,       // assign
			nil,       // do
			nil,       // while
			nil,       // if
			nil,       // else
			nil,       // gt
			nil,       // lt
			nil,       // neq
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // div
			nil,       // nums
			nil,       // period
			nil,       // lbracket
			nil,       // rbracket
			nil,       // void
		},
	},
	actionRow{ // S117
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(68), // rparen, reduce: WP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S118
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			shift(180), // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S119
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(30), // id, reduce: Assign
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			reduce(30), // rbrace, reduce: Assign
			reduce(30), // print, reduce: Assign
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			reduce(30), // while, reduce: Assign
			reduce(30), // if, reduce: Assign
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S120
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(40), // semicolon, reduce: Expresion
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S121
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(181), // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S122
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(181), // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S123
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(181), // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S124
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(45), // semicolon, reduce: Exp
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(45), // gt, reduce: Exp
			reduce(45), // lt, reduce: Exp
			reduce(45), // neq, reduce: Exp
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S125
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(81),  // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S126
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(81),  // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S127
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(49), // semicolon, reduce: Termino
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(49), // gt, reduce: Termino
			reduce(49), // lt, reduce: Termino
			reduce(49), // neq, reduce: Termino
			reduce(49), // plus, reduce: Termino
			reduce(49), // minus, reduce: Termino
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S128
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(81),  // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S129
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(81),  // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S130
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(58), // semicolon, reduce: FactorPP
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(58), // gt, reduce: FactorPP
			reduce(58), // lt, reduce: FactorPP
			reduce(58), // neq, reduce: FactorPP
			reduce(58), // plus, reduce: FactorPP
			reduce(58), // minus, reduce: FactorPP
			reduce(58), // mul, reduce: FactorPP
			reduce(58), // div, reduce: FactorPP
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S131
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(54), // semicolon, reduce: Factor
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(54), // gt, reduce: Factor
			reduce(54), // lt, reduce: Factor
			reduce(54), // neq, reduce: Factor
			reduce(54), // plus, reduce: Factor
			reduce(54), // minus, reduce: Factor
			reduce(54), // mul, reduce: Factor
			reduce(54), // div, reduce: Factor
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S132
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(59), // semicolon, reduce: FactorPP
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(59), // gt, reduce: FactorPP
			reduce(59), // lt, reduce: FactorPP
			reduce(59), // neq, reduce: FactorPP
			reduce(59), // plus, reduce: FactorPP
			reduce(59), // minus, reduce: FactorPP
			reduce(59), // mul, reduce: FactorPP
			reduce(59), // div, reduce: FactorPP
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S133
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(60), // semicolon, reduce: CTE
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(60), // gt, reduce: CTE
			reduce(60), // lt, reduce: CTE
			reduce(60), // neq, reduce: CTE
			reduce(60), // plus, reduce: CTE
			reduce(60), // minus, reduce: CTE
			reduce(60), // mul, reduce: CTE
			reduce(60), // div, reduce: CTE
			nil,        // nums
			shift(192), // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S134
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			shift(193), // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S135
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			shift(194), // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S136
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(89),  // lparen
			nil,        // rparen
			shift(91),  // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S137
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(26), // rparen, reduce: PrintP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S138
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(27), // rparen, reduce: PrintP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S139
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(40), // comma, reduce: Expresion
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(40), // rparen, reduce: Expresion
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S140
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(196), // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S141
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(196), // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S142
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(196), // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S143
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(45), // comma, reduce: Exp
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(45), // rparen, reduce: Exp
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(45), // gt, reduce: Exp
			reduce(45), // lt, reduce: Exp
			reduce(45), // neq, reduce: Exp
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S144
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(89),  // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S145
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(89),  // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S146
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(49), // comma, reduce: Termino
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(49), // rparen, reduce: Termino
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(49), // gt, reduce: Termino
			reduce(49), // lt, reduce: Termino
			reduce(49), // neq, reduce: Termino
			reduce(49), // plus, reduce: Termino
			reduce(49), // minus, reduce: Termino
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S147
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(89),  // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S148
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(89),  // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S149
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(58), // comma, reduce: FactorPP
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(58), // rparen, reduce: FactorPP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(58), // gt, reduce: FactorPP
			reduce(58), // lt, reduce: FactorPP
			reduce(58), // neq, reduce: FactorPP
			reduce(58), // plus, reduce: FactorPP
			reduce(58), // minus, reduce: FactorPP
			reduce(58), // mul, reduce: FactorPP
			reduce(58), // div, reduce: FactorPP
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S150
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(54), // comma, reduce: Factor
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(54), // rparen, reduce: Factor
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(54), // gt, reduce: Factor
			reduce(54), // lt, reduce: Factor
			reduce(54), // neq, reduce: Factor
			reduce(54), // plus, reduce: Factor
			reduce(54), // minus, reduce: Factor
			reduce(54), // mul, reduce: Factor
			reduce(54), // div, reduce: Factor
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S151
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(59), // comma, reduce: FactorPP
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(59), // rparen, reduce: FactorPP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(59), // gt, reduce: FactorPP
			reduce(59), // lt, reduce: FactorPP
			reduce(59), // neq, reduce: FactorPP
			reduce(59), // plus, reduce: FactorPP
			reduce(59), // minus, reduce: FactorPP
			reduce(59), // mul, reduce: FactorPP
			reduce(59), // div, reduce: FactorPP
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S152
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(60), // comma, reduce: CTE
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(60), // rparen, reduce: CTE
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(60), // gt, reduce: CTE
			reduce(60), // lt, reduce: CTE
			reduce(60), // neq, reduce: CTE
			reduce(60), // plus, reduce: CTE
			reduce(60), // minus, reduce: CTE
			reduce(60), // mul, reduce: CTE
			reduce(60), // div, reduce: CTE
			nil,        // nums
			shift(207), // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S153
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(31), // id, reduce: Cycle
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			reduce(31), // rbrace, reduce: Cycle
			reduce(31), // print, reduce: Cycle
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			reduce(31), // while, reduce: Cycle
			reduce(31), // if, reduce: Cycle
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S154
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			shift(208), // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S155
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			shift(209), // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S156
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			reduce(32), // do, reduce: CycleStart
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S157
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(40), // rparen, reduce: Expresion
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S158
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(210), // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S159
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(210), // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S160
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(210), // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S161
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(45), // rparen, reduce: Exp
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(45), // gt, reduce: Exp
			reduce(45), // lt, reduce: Exp
			reduce(45), // neq, reduce: Exp
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S162
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(99),  // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S163
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(99),  // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S164
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(49), // rparen, reduce: Termino
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(49), // gt, reduce: Termino
			reduce(49), // lt, reduce: Termino
			reduce(49), // neq, reduce: Termino
			reduce(49), // plus, reduce: Termino
			reduce(49), // minus, reduce: Termino
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S165
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(99),  // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S166
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(99),  // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S167
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(58), // rparen, reduce: FactorPP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(58), // gt, reduce: FactorPP
			reduce(58), // lt, reduce: FactorPP
			reduce(58), // neq, reduce: FactorPP
			reduce(58), // plus, reduce: FactorPP
			reduce(58), // minus, reduce: FactorPP
			reduce(58), // mul, reduce: FactorPP
			reduce(58), // div, reduce: FactorPP
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S168
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(54), // rparen, reduce: Factor
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(54), // gt, reduce: Factor
			reduce(54), // lt, reduce: Factor
			reduce(54), // neq, reduce: Factor
			reduce(54), // plus, reduce: Factor
			reduce(54), // minus, reduce: Factor
			reduce(54), // mul, reduce: Factor
			reduce(54), // div, reduce: Factor
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S169
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(59), // rparen, reduce: FactorPP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(59), // gt, reduce: FactorPP
			reduce(59), // lt, reduce: FactorPP
			reduce(59), // neq, reduce: FactorPP
			reduce(59), // plus, reduce: FactorPP
			reduce(59), // minus, reduce: FactorPP
			reduce(59), // mul, reduce: FactorPP
			reduce(59), // div, reduce: FactorPP
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S170
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(60), // rparen, reduce: CTE
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(60), // gt, reduce: CTE
			reduce(60), // lt, reduce: CTE
			reduce(60), // neq, reduce: CTE
			reduce(60), // plus, reduce: CTE
			reduce(60), // minus, reduce: CTE
			reduce(60), // mul, reduce: CTE
			reduce(60), // div, reduce: CTE
			nil,        // nums
			shift(221), // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S171
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(34), // id, reduce: Condition
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			reduce(34), // rbrace, reduce: Condition
			reduce(34), // print, reduce: Condition
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			reduce(34), // while, reduce: Condition
			reduce(34), // if, reduce: Condition
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S172
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(39), // semicolon, reduce: SetEndJump
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S173
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(17), // semicolon, reduce: Body
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			reduce(17), // else, reduce: Body
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S174
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			reduce(35), // lbrace, reduce: ConditionStart
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S175
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(89),  // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S176
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(77), // rparen, reduce: ZParameters
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S177
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			shift(224), // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S178
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			shift(33),  // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			reduce(14), // lbrace, reduce: Y
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S179
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(67), // rparen, reduce: W
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S180
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(53), // semicolon, reduce: Factor
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(53), // gt, reduce: Factor
			reduce(53), // lt, reduce: Factor
			reduce(53), // neq, reduce: Factor
			reduce(53), // plus, reduce: Factor
			reduce(53), // minus, reduce: Factor
			reduce(53), // mul, reduce: Factor
			reduce(53), // div, reduce: Factor
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S181
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(99),  // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S182
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(42), // semicolon, reduce: EP
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S183
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(46), // semicolon, reduce: ExpP
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(229), // plus
			shift(230), // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S184
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(50), // semicolon, reduce: TP
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			reduce(50), // plus, reduce: TP
			reduce(50), // minus, reduce: TP
			shift(232), // mul
			shift(233), // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S185
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			shift(234), // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			shift(237), // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S186
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(43), // semicolon, reduce: EP
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S187
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(44), // semicolon, reduce: EP
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S188
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(46), // semicolon, reduce: ExpP
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(46), // gt, reduce: ExpP
			reduce(46), // lt, reduce: ExpP
			reduce(46), // neq, reduce: ExpP
			shift(125), // plus
			shift(126), // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S189
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(46), // semicolon, reduce: ExpP
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(46), // gt, reduce: ExpP
			reduce(46), // lt, reduce: ExpP
			reduce(46), // neq, reduce: ExpP
			shift(125), // plus
			shift(126), // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S190
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(50), // semicolon, reduce: TP
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(50), // gt, reduce: TP
			reduce(50), // lt, reduce: TP
			reduce(50), // neq, reduce: TP
			reduce(50), // plus, reduce: TP
			reduce(50), // minus, reduce: TP
			shift(128), // mul
			shift(129), // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S191
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(50), // semicolon, reduce: TP
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(50), // gt, reduce: TP
			reduce(50), // lt, reduce: TP
			reduce(50), // neq, reduce: TP
			reduce(50), // plus, reduce: TP
			reduce(50), // minus, reduce: TP
			shift(128), // mul
			shift(129), // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S192
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			shift(242), // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S193
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(53), // comma, reduce: Factor
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(53), // rparen, reduce: Factor
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(53), // gt, reduce: Factor
			reduce(53), // lt, reduce: Factor
			reduce(53), // neq, reduce: Factor
			reduce(53), // plus, reduce: Factor
			reduce(53), // minus, reduce: Factor
			reduce(53), // mul, reduce: Factor
			reduce(53), // div, reduce: Factor
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S194
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(25), // id, reduce: Print
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			reduce(25), // rbrace, reduce: Print
			reduce(25), // print, reduce: Print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			reduce(25), // while, reduce: Print
			reduce(25), // if, reduce: Print
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S195
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(29), // rparen, reduce: PrintPP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S196
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(99),  // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S197
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(42), // comma, reduce: EP
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(42), // rparen, reduce: EP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S198
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(46), // comma, reduce: ExpP
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(46), // rparen, reduce: ExpP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(245), // plus
			shift(246), // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S199
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(50), // comma, reduce: TP
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(50), // rparen, reduce: TP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			reduce(50), // plus, reduce: TP
			reduce(50), // minus, reduce: TP
			shift(248), // mul
			shift(249), // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S200
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			shift(250), // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			shift(253), // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S201
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(43), // comma, reduce: EP
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(43), // rparen, reduce: EP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S202
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(44), // comma, reduce: EP
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(44), // rparen, reduce: EP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S203
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(46), // comma, reduce: ExpP
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(46), // rparen, reduce: ExpP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(46), // gt, reduce: ExpP
			reduce(46), // lt, reduce: ExpP
			reduce(46), // neq, reduce: ExpP
			shift(144), // plus
			shift(145), // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S204
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(46), // comma, reduce: ExpP
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(46), // rparen, reduce: ExpP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(46), // gt, reduce: ExpP
			reduce(46), // lt, reduce: ExpP
			reduce(46), // neq, reduce: ExpP
			shift(144), // plus
			shift(145), // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S205
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(50), // comma, reduce: TP
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(50), // rparen, reduce: TP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(50), // gt, reduce: TP
			reduce(50), // lt, reduce: TP
			reduce(50), // neq, reduce: TP
			reduce(50), // plus, reduce: TP
			reduce(50), // minus, reduce: TP
			shift(147), // mul
			shift(148), // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S206
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(50), // comma, reduce: TP
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(50), // rparen, reduce: TP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(50), // gt, reduce: TP
			reduce(50), // lt, reduce: TP
			reduce(50), // neq, reduce: TP
			reduce(50), // plus, reduce: TP
			reduce(50), // minus, reduce: TP
			shift(147), // mul
			shift(148), // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S207
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			shift(258), // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S208
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(17), // semicolon, reduce: Body
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S209
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(53), // rparen, reduce: Factor
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(53), // gt, reduce: Factor
			reduce(53), // lt, reduce: Factor
			reduce(53), // neq, reduce: Factor
			reduce(53), // plus, reduce: Factor
			reduce(53), // minus, reduce: Factor
			reduce(53), // mul, reduce: Factor
			reduce(53), // div, reduce: Factor
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S210
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(99),  // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S211
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(42), // rparen, reduce: EP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S212
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(46), // rparen, reduce: ExpP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(261), // plus
			shift(262), // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S213
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(50), // rparen, reduce: TP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			reduce(50), // plus, reduce: TP
			reduce(50), // minus, reduce: TP
			shift(264), // mul
			shift(265), // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S214
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			shift(266), // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			shift(269), // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S215
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(43), // rparen, reduce: EP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S216
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(44), // rparen, reduce: EP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S217
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(46), // rparen, reduce: ExpP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(46), // gt, reduce: ExpP
			reduce(46), // lt, reduce: ExpP
			reduce(46), // neq, reduce: ExpP
			shift(162), // plus
			shift(163), // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S218
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(46), // rparen, reduce: ExpP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(46), // gt, reduce: ExpP
			reduce(46), // lt, reduce: ExpP
			reduce(46), // neq, reduce: ExpP
			shift(162), // plus
			shift(163), // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S219
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(50), // rparen, reduce: TP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(50), // gt, reduce: TP
			reduce(50), // lt, reduce: TP
			reduce(50), // neq, reduce: TP
			reduce(50), // plus, reduce: TP
			reduce(50), // minus, reduce: TP
			shift(165), // mul
			shift(166), // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S220
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(50), // rparen, reduce: TP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(50), // gt, reduce: TP
			reduce(50), // lt, reduce: TP
			reduce(50), // neq, reduce: TP
			reduce(50), // plus, reduce: TP
			reduce(50), // minus, reduce: TP
			shift(165), // mul
			shift(166), // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S221
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			shift(274), // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S222
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(36), // semicolon, reduce: ConditionP
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S223
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(76), // rparen, reduce: Z
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S224
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(71), // id, reduce: FCall
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			reduce(71), // rbrace, reduce: FCall
			reduce(71), // print, reduce: FCall
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			reduce(71), // while, reduce: FCall
			reduce(71), // if, reduce: FCall
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S225
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			reduce(13), // lbrace, reduce: Y
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S226
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			reduce(10), // lbrace, reduce: VarsP
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S227
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			shift(275), // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S228
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(45), // semicolon, reduce: Exp
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S229
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(181), // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S230
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(181), // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S231
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(49), // semicolon, reduce: Termino
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			reduce(49), // plus, reduce: Termino
			reduce(49), // minus, reduce: Termino
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S232
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(181), // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S233
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(181), // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S234
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(58), // semicolon, reduce: FactorPP
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			reduce(58), // plus, reduce: FactorPP
			reduce(58), // minus, reduce: FactorPP
			reduce(58), // mul, reduce: FactorPP
			reduce(58), // div, reduce: FactorPP
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S235
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(54), // semicolon, reduce: Factor
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			reduce(54), // plus, reduce: Factor
			reduce(54), // minus, reduce: Factor
			reduce(54), // mul, reduce: Factor
			reduce(54), // div, reduce: Factor
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S236
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(59), // semicolon, reduce: FactorPP
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			reduce(59), // plus, reduce: FactorPP
			reduce(59), // minus, reduce: FactorPP
			reduce(59), // mul, reduce: FactorPP
			reduce(59), // div, reduce: FactorPP
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S237
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(60), // semicolon, reduce: CTE
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			reduce(60), // plus, reduce: CTE
			reduce(60), // minus, reduce: CTE
			reduce(60), // mul, reduce: CTE
			reduce(60), // div, reduce: CTE
			nil,        // nums
			shift(280), // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S238
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(47), // semicolon, reduce: ExpP
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(47), // gt, reduce: ExpP
			reduce(47), // lt, reduce: ExpP
			reduce(47), // neq, reduce: ExpP
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S239
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(48), // semicolon, reduce: ExpP
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(48), // gt, reduce: ExpP
			reduce(48), // lt, reduce: ExpP
			reduce(48), // neq, reduce: ExpP
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S240
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(51), // semicolon, reduce: TP
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(51), // gt, reduce: TP
			reduce(51), // lt, reduce: TP
			reduce(51), // neq, reduce: TP
			reduce(51), // plus, reduce: TP
			reduce(51), // minus, reduce: TP
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S241
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(52), // semicolon, reduce: TP
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(52), // gt, reduce: TP
			reduce(52), // lt, reduce: TP
			reduce(52), // neq, reduce: TP
			reduce(52), // plus, reduce: TP
			reduce(52), // minus, reduce: TP
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S242
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(61), // semicolon, reduce: CTE
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(61), // gt, reduce: CTE
			reduce(61), // lt, reduce: CTE
			reduce(61), // neq, reduce: CTE
			reduce(61), // plus, reduce: CTE
			reduce(61), // minus, reduce: CTE
			reduce(61), // mul, reduce: CTE
			reduce(61), // div, reduce: CTE
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S243
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			shift(281), // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S244
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(45), // comma, reduce: Exp
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(45), // rparen, reduce: Exp
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S245
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(196), // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S246
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(196), // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S247
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(49), // comma, reduce: Termino
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(49), // rparen, reduce: Termino
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			reduce(49), // plus, reduce: Termino
			reduce(49), // minus, reduce: Termino
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S248
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(196), // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S249
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(196), // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S250
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(58), // comma, reduce: FactorPP
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(58), // rparen, reduce: FactorPP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			reduce(58), // plus, reduce: FactorPP
			reduce(58), // minus, reduce: FactorPP
			reduce(58), // mul, reduce: FactorPP
			reduce(58), // div, reduce: FactorPP
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S251
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(54), // comma, reduce: Factor
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(54), // rparen, reduce: Factor
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			reduce(54), // plus, reduce: Factor
			reduce(54), // minus, reduce: Factor
			reduce(54), // mul, reduce: Factor
			reduce(54), // div, reduce: Factor
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S252
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(59), // comma, reduce: FactorPP
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(59), // rparen, reduce: FactorPP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			reduce(59), // plus, reduce: FactorPP
			reduce(59), // minus, reduce: FactorPP
			reduce(59), // mul, reduce: FactorPP
			reduce(59), // div, reduce: FactorPP
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S253
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(60), // comma, reduce: CTE
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(60), // rparen, reduce: CTE
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			reduce(60), // plus, reduce: CTE
			reduce(60), // minus, reduce: CTE
			reduce(60), // mul, reduce: CTE
			reduce(60), // div, reduce: CTE
			nil,        // nums
			shift(286), // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S254
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(47), // comma, reduce: ExpP
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(47), // rparen, reduce: ExpP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(47), // gt, reduce: ExpP
			reduce(47), // lt, reduce: ExpP
			reduce(47), // neq, reduce: ExpP
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S255
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(48), // comma, reduce: ExpP
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(48), // rparen, reduce: ExpP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(48), // gt, reduce: ExpP
			reduce(48), // lt, reduce: ExpP
			reduce(48), // neq, reduce: ExpP
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S256
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(51), // comma, reduce: TP
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(51), // rparen, reduce: TP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(51), // gt, reduce: TP
			reduce(51), // lt, reduce: TP
			reduce(51), // neq, reduce: TP
			reduce(51), // plus, reduce: TP
			reduce(51), // minus, reduce: TP
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S257
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(52), // comma, reduce: TP
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(52), // rparen, reduce: TP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(52), // gt, reduce: TP
			reduce(52), // lt, reduce: TP
			reduce(52), // neq, reduce: TP
			reduce(52), // plus, reduce: TP
			reduce(52), // minus, reduce: TP
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S258
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(61), // comma, reduce: CTE
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(61), // rparen, reduce: CTE
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(61), // gt, reduce: CTE
			reduce(61), // lt, reduce: CTE
			reduce(61), // neq, reduce: CTE
			reduce(61), // plus, reduce: CTE
			reduce(61), // minus, reduce: CTE
			reduce(61), // mul, reduce: CTE
			reduce(61), // div, reduce: CTE
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S259
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			shift(287), // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S260
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(45), // rparen, reduce: Exp
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S261
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(210), // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S262
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(210), // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S263
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(49), // rparen, reduce: Termino
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			reduce(49), // plus, reduce: Termino
			reduce(49), // minus, reduce: Termino
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S264
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(210), // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S265
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			reduce(55), // id, reduce: FactorP
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			shift(210), // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(85),  // plus
			shift(86),  // minus
			nil,        // mul
			nil,        // div
			reduce(55), // nums, reduce: FactorP
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S266
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(58), // rparen, reduce: FactorPP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			reduce(58), // plus, reduce: FactorPP
			reduce(58), // minus, reduce: FactorPP
			reduce(58), // mul, reduce: FactorPP
			reduce(58), // div, reduce: FactorPP
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S267
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(54), // rparen, reduce: Factor
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			reduce(54), // plus, reduce: Factor
			reduce(54), // minus, reduce: Factor
			reduce(54), // mul, reduce: Factor
			reduce(54), // div, reduce: Factor
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S268
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(59), // rparen, reduce: FactorPP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			reduce(59), // plus, reduce: FactorPP
			reduce(59), // minus, reduce: FactorPP
			reduce(59), // mul, reduce: FactorPP
			reduce(59), // div, reduce: FactorPP
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S269
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(60), // rparen, reduce: CTE
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			reduce(60), // plus, reduce: CTE
			reduce(60), // minus, reduce: CTE
			reduce(60), // mul, reduce: CTE
			reduce(60), // div, reduce: CTE
			nil,        // nums
			shift(292), // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S270
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(47), // rparen, reduce: ExpP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(47), // gt, reduce: ExpP
			reduce(47), // lt, reduce: ExpP
			reduce(47), // neq, reduce: ExpP
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S271
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(48), // rparen, reduce: ExpP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(48), // gt, reduce: ExpP
			reduce(48), // lt, reduce: ExpP
			reduce(48), // neq, reduce: ExpP
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S272
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(51), // rparen, reduce: TP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(51), // gt, reduce: TP
			reduce(51), // lt, reduce: TP
			reduce(51), // neq, reduce: TP
			reduce(51), // plus, reduce: TP
			reduce(51), // minus, reduce: TP
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S273
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(52), // rparen, reduce: TP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(52), // gt, reduce: TP
			reduce(52), // lt, reduce: TP
			reduce(52), // neq, reduce: TP
			reduce(52), // plus, reduce: TP
			reduce(52), // minus, reduce: TP
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S274
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(61), // rparen, reduce: CTE
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			reduce(61), // gt, reduce: CTE
			reduce(61), // lt, reduce: CTE
			reduce(61), // neq, reduce: CTE
			reduce(61), // plus, reduce: CTE
			reduce(61), // minus, reduce: CTE
			reduce(61), // mul, reduce: CTE
			reduce(61), // div, reduce: CTE
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S275
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(53), // semicolon, reduce: Factor
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			reduce(53), // plus, reduce: Factor
			reduce(53), // minus, reduce: Factor
			reduce(53), // mul, reduce: Factor
			reduce(53), // div, reduce: Factor
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S276
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(46), // semicolon, reduce: ExpP
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(229), // plus
			shift(230), // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S277
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(46), // semicolon, reduce: ExpP
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(229), // plus
			shift(230), // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S278
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(50), // semicolon, reduce: TP
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			reduce(50), // plus, reduce: TP
			reduce(50), // minus, reduce: TP
			shift(232), // mul
			shift(233), // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S279
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(50), // semicolon, reduce: TP
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			reduce(50), // plus, reduce: TP
			reduce(50), // minus, reduce: TP
			shift(232), // mul
			shift(233), // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S280
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			shift(297), // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S281
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(53), // comma, reduce: Factor
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(53), // rparen, reduce: Factor
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			reduce(53), // plus, reduce: Factor
			reduce(53), // minus, reduce: Factor
			reduce(53), // mul, reduce: Factor
			reduce(53), // div, reduce: Factor
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S282
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(46), // comma, reduce: ExpP
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(46), // rparen, reduce: ExpP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(245), // plus
			shift(246), // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S283
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(46), // comma, reduce: ExpP
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(46), // rparen, reduce: ExpP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(245), // plus
			shift(246), // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S284
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(50), // comma, reduce: TP
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(50), // rparen, reduce: TP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			reduce(50), // plus, reduce: TP
			reduce(50), // minus, reduce: TP
			shift(248), // mul
			shift(249), // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S285
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(50), // comma, reduce: TP
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(50), // rparen, reduce: TP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			reduce(50), // plus, reduce: TP
			reduce(50), // minus, reduce: TP
			shift(248), // mul
			shift(249), // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S286
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			shift(302), // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S287
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(53), // rparen, reduce: Factor
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			reduce(53), // plus, reduce: Factor
			reduce(53), // minus, reduce: Factor
			reduce(53), // mul, reduce: Factor
			reduce(53), // div, reduce: Factor
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S288
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(46), // rparen, reduce: ExpP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(261), // plus
			shift(262), // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S289
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(46), // rparen, reduce: ExpP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			shift(261), // plus
			shift(262), // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S290
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(50), // rparen, reduce: TP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			reduce(50), // plus, reduce: TP
			reduce(50), // minus, reduce: TP
			shift(264), // mul
			shift(265), // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S291
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(50), // rparen, reduce: TP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			reduce(50), // plus, reduce: TP
			reduce(50), // minus, reduce: TP
			shift(264), // mul
			shift(265), // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S292
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			shift(307), // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S293
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(47), // semicolon, reduce: ExpP
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S294
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(48), // semicolon, reduce: ExpP
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S295
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(51), // semicolon, reduce: TP
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			reduce(51), // plus, reduce: TP
			reduce(51), // minus, reduce: TP
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S296
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(52), // semicolon, reduce: TP
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			reduce(52), // plus, reduce: TP
			reduce(52), // minus, reduce: TP
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S297
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			reduce(61), // semicolon, reduce: CTE
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			nil,        // rparen
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			reduce(61), // plus, reduce: CTE
			reduce(61), // minus, reduce: CTE
			reduce(61), // mul, reduce: CTE
			reduce(61), // div, reduce: CTE
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S298
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(47), // comma, reduce: ExpP
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(47), // rparen, reduce: ExpP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S299
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(48), // comma, reduce: ExpP
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(48), // rparen, reduce: ExpP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S300
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(51), // comma, reduce: TP
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(51), // rparen, reduce: TP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			reduce(51), // plus, reduce: TP
			reduce(51), // minus, reduce: TP
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S301
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(52), // comma, reduce: TP
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(52), // rparen, reduce: TP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			reduce(52), // plus, reduce: TP
			reduce(52), // minus, reduce: TP
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S302
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			reduce(61), // comma, reduce: CTE
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(61), // rparen, reduce: CTE
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			reduce(61), // plus, reduce: CTE
			reduce(61), // minus, reduce: CTE
			reduce(61), // mul, reduce: CTE
			reduce(61), // div, reduce: CTE
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S303
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(47), // rparen, reduce: ExpP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S304
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(48), // rparen, reduce: ExpP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S305
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(51), // rparen, reduce: TP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			reduce(51), // plus, reduce: TP
			reduce(51), // minus, reduce: TP
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S306
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(52), // rparen, reduce: TP
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			reduce(52), // plus, reduce: TP
			reduce(52), // minus, reduce: TP
			nil,        // mul
			nil,        // div
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
	actionRow{ // S307
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // end
			nil,        // program
			nil,        // id
			nil,        // semicolon
			nil,        // main
			nil,        // empty
			nil,        // var
			nil,        // colon
			nil,        // comma
			nil,        // int
			nil,        // float
			nil,        // lbrace
			nil,        // rbrace
			nil,        // print
			nil,        // lparen
			reduce(61), // rparen, reduce: CTE
			nil,        // string_literal
			nil,        // assign
			nil,        // do
			nil,        // while
			nil,        // if
			nil,        // else
			nil,        // gt
			nil,        // lt
			nil,        // neq
			reduce(61), // plus, reduce: CTE
			reduce(61), // minus, reduce: CTE
			reduce(61), // mul, reduce: CTE
			reduce(61), // div, reduce: CTE
			nil,        // nums
			nil,        // period
			nil,        // lbracket
			nil,        // rbracket
			nil,        // void
		},
	},
}
