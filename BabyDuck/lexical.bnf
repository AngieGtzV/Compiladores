/* Lexical Parser */
!whitespace : '\t' | '\n' | '\r' | ' ' ;
!lineComment  : '/' '/' { . } '\n' ;
!blockComment : '/' '*' { . | '*' } '*' '/' ;

_letter : 'A'-'Z' | 'a'-'z' | '_' ;
_digit : '0'-'9' ;
_alpha : _letter | _digit ;

string_literal : '"' {_alpha | ' ' | '!' | '?' | '.' | ',' | ';' | ':' | '-' | '_' | '(' | ')' | '+' | '*' | '{' | '}' | '[' | ']' | '=' | '&' | '/' | '%' }'"' ;
nums : '0' | '1'-'9' {_digit} ;


/* keywords */
program: 'p' 'r' 'o' 'g' 'r' 'a' 'm' ;
main: 'm' 'a' 'i' 'n' ;
end: 'e' 'n' 'd' ;
var: 'v' 'a' 'r' ;
print: 'p' 'r' 'i' 'n' 't' ;
while: 'w' 'h' 'i' 'l' 'e';
do: 'd' 'o' ;
if : 'i' 'f' ;
else : 'e' 'l' 's' 'e' ;
void: 'v' 'o' 'i' 'd' ;
int: 'i' 'n' 't' ;
float: 'f' 'l' 'o' 'a' 't' ;

id : _letter {_alpha} ;

/* punctuation */
plus : '+' ; //1
minus : '-' ;  //2
mul : '*' ;  //3
div : '/' ;  //4
assign : '=' ; //5

lt : '<' ;  //6
gt : '>' ;  //7
neq : '!' '=' ;  //8

lbrace : '{' ;
rbrace : '}' ;
lparen : '(' ;
rparen : ')' ;
lbracket : '[' ;
rbracket : ']' ;
comma : ',' ;
semicolon : ';' ;
period : '.' ;
colon : ':' ;

/* Syntactic Parsr */
<<
import (
	"BabyDuck/semantics"
    "fmt"
	"BabyDuck/token"
)
>>

Programa
  : ProgramaHeader ProgramaP ProgramaMain end
  ;

ProgramaHeader
  : program id semicolon
  <<
        func() (Attrib, error) {
            err := semantics.AddFunction("program", "void")
            if err != nil {
                return nil, err
            }
            err = semantics.SetCurrentFunction("program")
            if err != nil {
                return nil, err
            }
            return nil, nil
        }()
  >>
  ;

ProgramaMain
    : main Body
    <<
        func() (Attrib, error) {
            err := semantics.AddFunction("main", "void")
            if err != nil {
                return nil, fmt.Errorf("error al declarar main: %v", err)
            }
            err = semantics.SetCurrentFunction("main")
            if err != nil {
                return nil, err
            }
            return err, nil
        }()
    >>
    ;

ProgramaP
    : Vars FP
    | FP
    ;

FP
    : Funcs FP
    | empty
    ;

Vars 
    : var VarsP
    ;

VarsP
    : id X colon Type semicolon Y 
     <<
        func() (Attrib, error) {
            idTok, ok := X[0].(*token.Token)
            if !ok {
                return nil, fmt.Errorf("varsP: se esperaba *token.Token en X[0], obtuve %T", X[0])
            }
            idList, err := semantics.CollectIDs(string(idTok.Lit), X[1])
            if err != nil {
                return nil, err
            }
            typeStr, ok := X[3].(string)
            if !ok {
                return nil, fmt.Errorf("varsP: se esperaba string en X[3], obtuve %T", X[3])
            }
            for _, id := range idList {
                if err := semantics.AddVariable(id, typeStr); err != nil {
                    return nil, err
                }
            }
            return nil, nil
        }()
    >>
    ;

X
    : comma id X
    <<
    func() (Attrib, error) {
        idTok, ok := X[1].(*token.Token)
        if !ok {
            return nil, fmt.Errorf("x: se esperaba *token.Token en X[1], obtuve %T", X[1])
        }
        return semantics.AppendID(string(idTok.Lit), X[2])
    }()
  >>
    | empty
    <<
        func() (Attrib, error) {
            return semantics.EmptyIDList()
        }()
    >>
    ;

Y
    : VarsP
    | empty
    ;

Type
    : int
    <<
        func() (Attrib, error) {
            return "int", nil
        }()
    >>
    | float 
    <<
        func() (Attrib, error) {
            return "float", nil
        }()
    >>
    ;

Body
    : lbrace BodyP rbrace
    ;

BodyP
    : empty
    | Statement BodyP
    ;

Statement
    : Assign
    | Condition
    | Cycle
    | FCall
    | Print
    ;

Print
    : print lparen PrintP rparen semicolon
    ;

PrintP
    : string_literal PrintPP
    <<
        func() (Attrib, error) {
            tok, ok := $0.(*token.Token)
            if !ok {
                return nil, fmt.Errorf("print: cte inválida (string)")
            }
            lit := string(tok.Lit)

            addr := semantics.ConstTab.GetOrAddConstant(lit, "string")

            // Generar cuádruplo de PRINT : 11
            semantics.AddQuadruple(11, addr, -1, -1)

            return nil, nil
        }()
    >>
    | Expresion PrintPP
    <<
       func() (Attrib, error) {
            expr, ok := $0.(semantics.Operand)
            if !ok {
                return nil, fmt.Errorf("print: expresión inválida")
            }

            semantics.AddQuadruple(11, expr.Addr, -1, -1)
            return nil, nil
        }() 
    >>
    ;

PrintPP
    : empty
     <<
        func() (Attrib, error) {
            return nil, nil
        }()
    >>
    | comma PrintP
    <<
        func() (Attrib, error) {
            return nil, nil
        }()
    >>
    ;

Assign
    : id assign Expresion semicolon
    <<
        func() (Attrib, error) {
            idTok, ok := X[0].(*token.Token)
            if !ok {
                return nil, fmt.Errorf("assign: se esperaba *token.Token en X[0], obtuve %T", X[0])
            }
            varName := string(idTok.Lit)

            // Obtener variable destino
            varInfo, err := semantics.LookupVariable(varName)
            if err != nil {
                return nil, err
            }

            // Obtener resultado de Expresion
            exprOp, ok := X[2].(semantics.Operand)
            if !ok {
                return nil, fmt.Errorf("assign: se esperaba Operand como resultado de Expresion")
            }

            // Verificar tipos
            if !semantics.TypeCompatible(varInfo.Type, exprOp.Type) {
                return nil, fmt.Errorf("assign: tipos incompatibles '%s' y '%s'", varInfo.Type, exprOp.Type)
            }

            // Generar cuádruplo de asignación (op = 0)
            semantics.AddQuadruple(0, exprOp.Addr, -1, varInfo.Address)

            return nil, nil
        }()
    >>
    ;

Cycle
    : CycleStart do Body semicolon
    <<
        func() (Attrib, error) {
            if len(semantics.JumpStack) < 2 {
                return nil, fmt.Errorf("cycle: JumpStack no tiene suficientes elementos")
            }

            end := len(semantics.Quadruples)
            falseJump, err := semantics.PopJump()
            if err != nil {
                return nil, fmt.Errorf("cycle: error al hacer PopJump (falseJump): %v", err)
            }
            ret, err := semantics.PopJump()
            if err != nil {
                return nil, fmt.Errorf("cycle: error al hacer PopJump (ret): %v", err)
            }

            semantics.AddQuadruple(8, -1, -1, ret)

            semantics.Quadruples[falseJump].Result = end

            return nil, nil
        }()
    >>
    ;

CycleStart
    : while lparen Expresion rparen
    <<
        func() (Attrib, error) {
            pos := len(semantics.Quadruples)
            semantics.PushJump(pos)

            if len(semantics.TypeStack) == 0 {
                return nil, fmt.Errorf("cycleStart: pila de tipos vacía")
            }

            condType := semantics.PopType()
            if condType != "bool" {
                return nil, fmt.Errorf("expresión de while no es booleana (tipo fue '%s')", condType)
            }

            cond := semantics.PopOperand()

            // 9 : GotoF (salto si condición es falsa)
            quad := semantics.Quadruple{
                Op:   9,
                Left: cond.Addr,
                Right: -1,
                Result:  -1, // lo rellenaremos en Cycle
            }
            semantics.Quadruples = append(semantics.Quadruples, quad)

            semantics.PushJump(len(semantics.Quadruples) - 1)

            return nil, nil
        }()
    >>
    ;

Condition
    : ConditionStart Body ConditionP semicolon
    ;

ConditionStart
    : if lparen Expresion rparen
    <<
        func() (Attrib, error) {
            topType := semantics.PopType()
            if topType != "bool" {
                return nil, fmt.Errorf("condición de 'if' no es booleana (tipo fue '%s')", topType)
            }

            condResult := semantics.PopOperand()

            // 9 : GOTOF 
            semantics.AddQuadruple(9, condResult.Addr, -1, -1)
            semantics.PushJump(len(semantics.Quadruples) - 1)

            return nil, nil
        }()
    >>
    ;

ConditionP
    : empty
    <<
        func() (Attrib, error) {
            falseJump, err := semantics.PopJump()
            if err != nil {
                return nil, err
            }

            semantics.Quadruples[falseJump].Result = len(semantics.Quadruples)
            return nil, nil
        }()
    >>
    | else Body
    <<
        func() (Attrib, error) {
            // 8 : GOTO que saltará después del else
            semantics.AddQuadruple(8, -1, -1, -1)
            endJump := len(semantics.Quadruples) - 1

            // 8 : GOTOF del if (al inicio del else)
            falseJump, err := semantics.PopJump()
            if err != nil {
                return nil, err
            }
            semantics.Quadruples[falseJump].Result = falseJump + 1

            // 8 : GOTO (al final del else)
            semantics.Quadruples[endJump].Result = len(semantics.Quadruples)

            return nil, nil
        }()
    >>
    ;

Expresion
    : Exp EP
    <<
        func() (Attrib, error) {
            if $1 == nil {
                return $0, nil
            }

            return $1, nil
        }()
    >>
    ;

EP
    : empty
    <<
        func() (Attrib, error) {
            return nil, nil
        }()
    >>
    | gt Exp
    <<
        func() (Attrib, error) {
            semantics.OperatorStack = append(semantics.OperatorStack, 6) // >
            
            // Extraer operandos y tipos
            right := semantics.PopOperand()
            left := semantics.PopOperand()
            rightType := semantics.PopType()
            leftType := semantics.PopType()
            op := semantics.PopOperator()
            
            if !semantics.TypeCompatible(leftType, rightType) {
                return nil, fmt.Errorf("EP: tipos incompatibles '%s' y '%s'", leftType, rightType)
            }

            tempAddr := semantics.Memory.Direccionar("temp", "bool")
            temp := semantics.Operand{Addr: tempAddr, Type: "bool"}
            semantics.AddQuadruple(op, left.Addr, right.Addr, tempAddr)

            semantics.PushOperand(temp)
            semantics.PushType("bool")

            return temp, nil
        }()
    >>
    | lt Exp
    <<
        func() (Attrib, error) {
            semantics.OperatorStack = append(semantics.OperatorStack, 5) // <
            
            right := semantics.PopOperand()
            left := semantics.PopOperand()
            rightType := semantics.PopType()
            leftType := semantics.PopType()
            op := semantics.PopOperator()
            
            if !semantics.TypeCompatible(leftType, rightType) {
                return nil, fmt.Errorf("EP: tipos incompatibles '%s' y '%s'", leftType, rightType)
            }

            tempAddr := semantics.Memory.Direccionar("temp", "bool")
            temp := semantics.Operand{Addr: tempAddr, Type: "bool"}
            semantics.AddQuadruple(op, left.Addr, right.Addr, tempAddr)

            semantics.PushOperand(temp)
            semantics.PushType("bool")

            return temp, nil
        }()
    >>
    | neq Exp
    <<
        func() (Attrib, error) {
            semantics.OperatorStack = append(semantics.OperatorStack, 7) // !=
            
            right := semantics.PopOperand()
            left := semantics.PopOperand()
            rightType := semantics.PopType()
            leftType := semantics.PopType()
            op := semantics.PopOperator()
            
            if !semantics.TypeCompatible(leftType, rightType) {
                return nil, fmt.Errorf("EP: tipos incompatibles '%s' y '%s'", leftType, rightType)
            }

            tempAddr := semantics.Memory.Direccionar("temp", "bool")
            temp := semantics.Operand{Addr: tempAddr, Type: "bool"}
            semantics.AddQuadruple(op, left.Addr, right.Addr, tempAddr)

            semantics.PushOperand(temp)
            semantics.PushType("bool")

            return temp, nil
        }()
    >>
    ;

Exp
    : Termino ExpP
    <<
        func() (Attrib, error) {
            if $1 == nil {
                return $0, nil
            }
            return $1, nil
        }()
    >>
    ;

ExpP
    : empty
    <<
        func() (Attrib, error) {
            return nil, nil
        }()
    >>
    | plus Termino ExpP
    <<
        func() (Attrib, error) {
            semantics.OperatorStack = append(semantics.OperatorStack, 1)
            right := semantics.OperandStack[len(semantics.OperandStack)-1]
            rightType := semantics.TypeStack[len(semantics.TypeStack)-1]
            semantics.OperandStack = semantics.OperandStack[:len(semantics.OperandStack)-1]
            semantics.TypeStack = semantics.TypeStack[:len(semantics.TypeStack)-1]

            left := semantics.OperandStack[len(semantics.OperandStack)-1]
            leftType := semantics.TypeStack[len(semantics.TypeStack)-1]
            semantics.OperandStack = semantics.OperandStack[:len(semantics.OperandStack)-1]
            semantics.TypeStack = semantics.TypeStack[:len(semantics.TypeStack)-1]

            if !semantics.TypeCompatible(leftType, rightType) {
                return nil, fmt.Errorf("ExpP: tipos incompatibles para suma: %s y %s", leftType, rightType)
            }

            op := semantics.OperatorStack[len(semantics.OperatorStack)-1]
            semantics.OperatorStack = semantics.OperatorStack[:len(semantics.OperatorStack)-1]

            resultType, err := semantics.ArithmeticResultType(leftType, rightType)
            if err != nil {
                return nil, err
            }

            resultAddr := semantics.Memory.Direccionar("temp", resultType)

            semantics.AddQuadruple(op, left.Addr, right.Addr, resultAddr)

            semantics.OperandStack = append(semantics.OperandStack, semantics.Operand{Addr: resultAddr})
            semantics.TypeStack = append(semantics.TypeStack, resultType)

            return semantics.Operand{Addr: resultAddr, Type: resultType}, nil
        }()
    >>
    | minus Termino ExpP
    <<
        func() (Attrib, error) {
            semantics.OperatorStack = append(semantics.OperatorStack, 2)

            right := semantics.OperandStack[len(semantics.OperandStack)-1]
            rightType := semantics.TypeStack[len(semantics.TypeStack)-1]
            semantics.OperandStack = semantics.OperandStack[:len(semantics.OperandStack)-1]
            semantics.TypeStack = semantics.TypeStack[:len(semantics.TypeStack)-1]

            left := semantics.OperandStack[len(semantics.OperandStack)-1]
            leftType := semantics.TypeStack[len(semantics.TypeStack)-1]
            semantics.OperandStack = semantics.OperandStack[:len(semantics.OperandStack)-1]
            semantics.TypeStack = semantics.TypeStack[:len(semantics.TypeStack)-1]

            if !semantics.TypeCompatible(leftType, rightType) {
                return nil, fmt.Errorf("ExpP: tipos incompatibles para resta: %s y %s", leftType, rightType)
            }

            op := semantics.OperatorStack[len(semantics.OperatorStack)-1]
            semantics.OperatorStack = semantics.OperatorStack[:len(semantics.OperatorStack)-1]

            resultType, err := semantics.ArithmeticResultType(leftType, rightType)
            if err != nil {
                return nil, err
            }

            resultAddr := semantics.Memory.Direccionar("temp", resultType)

            semantics.AddQuadruple(op, left.Addr, right.Addr, resultAddr)

            semantics.OperandStack = append(semantics.OperandStack, semantics.Operand{Addr: resultAddr})
            semantics.TypeStack = append(semantics.TypeStack, resultType)

            return semantics.Operand{Addr: resultAddr, Type: resultType}, nil
        }()
    >>
    ;

Termino
    : Factor TP
    <<
        func() (Attrib, error) {
            if $1 == nil {
                return $0, nil
            }
           return $1, nil
        }()
    >>
    ;

TP
    :empty
    <<
        func() (Attrib, error) {
            return nil, nil
        }()
    >>
    | mul Factor TP
    <<
        func() (Attrib, error) {
            semantics.OperatorStack = append(semantics.OperatorStack, 3)

            // Sacar operandos y tipos
            right := semantics.OperandStack[len(semantics.OperandStack)-1]
            semantics.OperandStack = semantics.OperandStack[:len(semantics.OperandStack)-1]
            rightType := semantics.TypeStack[len(semantics.TypeStack)-1]
            semantics.TypeStack = semantics.TypeStack[:len(semantics.TypeStack)-1]

            left := semantics.OperandStack[len(semantics.OperandStack)-1]
            semantics.OperandStack = semantics.OperandStack[:len(semantics.OperandStack)-1]
            leftType := semantics.TypeStack[len(semantics.TypeStack)-1]
            semantics.TypeStack = semantics.TypeStack[:len(semantics.TypeStack)-1]

            // Verificar compatibilidad
            if !semantics.TypeCompatible(leftType, rightType) {
                return nil, fmt.Errorf("tp: mul tipos incompatibles '%s' y '%s'", leftType, rightType)
            }

            resultType, err := semantics.ArithmeticResultType(leftType, rightType)
            if err != nil {
                return nil, err
            }

            // Obtener operador
            op := semantics.OperatorStack[len(semantics.OperatorStack)-1]
            semantics.OperatorStack = semantics.OperatorStack[:len(semantics.OperatorStack)-1]

            // Asignar dirección al resultado
            resultAddr := semantics.Memory.Direccionar("temp", resultType)

            // Crear cuádruplo
            semantics.AddQuadruple(op, left.Addr, right.Addr, resultAddr)

            // Empujar nuevo resultado a los stacks
            semantics.OperandStack = append(semantics.OperandStack, semantics.Operand{Addr: resultAddr})
            semantics.TypeStack = append(semantics.TypeStack, resultType)

            return semantics.Operand{Addr: resultAddr, Type: resultType}, nil
        }()
    >>
    | div Factor TP
    <<
        func() (Attrib, error) {
            semantics.OperatorStack = append(semantics.OperatorStack, 4)

            // Sacar operandos y tipos
            right := semantics.OperandStack[len(semantics.OperandStack)-1]
            semantics.OperandStack = semantics.OperandStack[:len(semantics.OperandStack)-1]
            rightType := semantics.TypeStack[len(semantics.TypeStack)-1]
            semantics.TypeStack = semantics.TypeStack[:len(semantics.TypeStack)-1]

            left := semantics.OperandStack[len(semantics.OperandStack)-1]
            semantics.OperandStack = semantics.OperandStack[:len(semantics.OperandStack)-1]
            leftType := semantics.TypeStack[len(semantics.TypeStack)-1]
            semantics.TypeStack = semantics.TypeStack[:len(semantics.TypeStack)-1]

            // Verificar compatibilidad
            if !semantics.TypeCompatible(leftType, rightType) {
                return nil, fmt.Errorf("TP: tipos incompatibles '%s' y '%s'", leftType, rightType)
            }

            resultType, err := semantics.ArithmeticResultType(leftType, rightType)
            if err != nil {
                return nil, err
            }

            // Obtener operador
            op := semantics.OperatorStack[len(semantics.OperatorStack)-1]
            semantics.OperatorStack = semantics.OperatorStack[:len(semantics.OperatorStack)-1]

            // Asignar dirección al resultado
            resultAddr := semantics.Memory.Direccionar("temp", resultType)

            // Crear cuádruplo
            semantics.AddQuadruple(op, left.Addr, right.Addr, resultAddr)

            // Empujar nuevo resultado a los stacks
            semantics.OperandStack = append(semantics.OperandStack, semantics.Operand{Addr: resultAddr})
            semantics.TypeStack = append(semantics.TypeStack, resultType)

            return semantics.Operand{Addr: resultAddr, Type: resultType}, nil
        }()
    >>
    ;

Factor
    : lparen Expresion rparen
    <<
        func() (Attrib, error) {
            return $1, nil
        }()
    >>
    | FactorP FactorPP
    <<
        func() (Attrib, error) {
            op, ok := $0.(int)
            operand, ok2 := $1.(semantics.Operand)
            if !ok2 {
                return nil, fmt.Errorf("factor: operando inválido")
            }

            if !ok {
                // No hubo + o -, simplemente devuelve el operando tal cual
                return operand, nil
            }

            // Solo tiene sentido aplicar cuádruplo si fue '-'
            if op == 2 { // negativo unario
                resultAddr := semantics.Memory.Direccionar("temp", operand.Type)
                semantics.AddQuadruple(op, operand.Addr, -1, resultAddr)

                newOperand := semantics.Operand{
                    Addr: resultAddr,
                    Type: operand.Type,
                }
                semantics.PushOperand(newOperand)

                return newOperand, nil
            }

            // Si es un + unario, no hace nada
            semantics.PushOperand(operand)
            return operand, nil
        }()
    >>
    ;

FactorP 
    : empty
    <<
        func() (Attrib, error) {
            return nil, nil
        }()
    >>
    | plus
    <<
        func() (Attrib, error) {
            return 1, nil
        }()
    >>
    | minus
    <<
        func() (Attrib, error) {
            return 2, nil
        }()
    >>
    ;

FactorPP
    : id 
    <<
        func() (Attrib, error) {
            tok, ok := $0.(*token.Token)
            if !ok {
                return nil, fmt.Errorf("factorPP: id inválido")
            }
            name := string(tok.Lit)
            v, err := semantics.LookupVariable(name)
            if err != nil {
                return nil, err
            }
            op := semantics.Operand{
                Type:  v.Type,
                Addr:  v.Address,
                Value: name,
            }

            semantics.PushOperand(op)

            return op, nil
        }()
    >>
    | CTE
     <<
        func() (Attrib, error) {
            op, ok := $0.(semantics.Operand)
            if !ok {
                return nil, fmt.Errorf("factorPP: CTE no es Operand")
            }
            semantics.PushOperand(op)

            return op, nil
        }()
    >>
    ;

CTE
    : nums
    <<
        func() (Attrib, error) {
            tok, ok := $0.(*token.Token)
            if !ok {
                return nil, fmt.Errorf("cte inválida (entero)")
            }
            lit := string(tok.Lit)
            typ := "int"

            addr := semantics.ConstTab.GetOrAddConstant(lit, typ)

            return semantics.Operand{
                Type:  typ,
                Value: lit,
                Addr:  addr,
            }, nil
        }()
    >>
    | nums period nums
    <<
        func() (Attrib, error) {
            intTok, ok1 := $0.(*token.Token)
            fracTok, ok2 := $2.(*token.Token)
            if !ok1 || !ok2 {
                return nil, fmt.Errorf("cte inválida (flotante)")
            }
            full := string(intTok.Lit) + "." + string(fracTok.Lit)
            typ := "float"

            addr := semantics.ConstTab.GetOrAddConstant(full, typ)

            return semantics.Operand{
                Type:  typ,
                Value: full,
                Addr:  addr,
            }, nil
        }()
    >>
    ;

Funcs
    : void id lparen FuncsP rparen lbracket VP Body rbracket semicolon
    <<
        func() (Attrib, error) {
            tok, ok := X[1].(*token.Token)
            if !ok {
                return nil, fmt.Errorf("esperaba *token.Token en X[1], obtuve %T", X[1])
            }
            name := string(tok.Lit)
            err := semantics.AddFunction(name, "void")
            if err != nil {
                return nil, err
            }
            semantics.SetCurrentFunction(name) // Cambia el contexto a la función
            return nil, nil
        }()
  >>
    ;

FuncsP
    : empty
    <<
      func() (Attrib, error) {
        return nil, nil // no hay parámetros
        }()
    >>
    | WP
    <<
        func() (Attrib, error) {
            return nil, nil // parámetros ya se agregan en WP
        }()
        >>
    ;

W
    : empty
    <<
      func() (Attrib, error) {
        return nil, nil
      }()
    >>
    | comma WP
    <<
        func() (Attrib, error) {
            return nil, nil // ya agregados en WP
        }()
        >>
    ;

WP
    : id colon Type W
    <<
    func() (Attrib, error) {
        idTok, ok := X[0].(*token.Token)
        if !ok {
            return nil, fmt.Errorf("wP: se esperaba *token.Token en X[0], obtuve %T", X[0])
        }
        typeStr, ok := X[2].(string)
        if !ok {
            return nil, fmt.Errorf("wP: se esperaba string en X[2], obtuve %T", X[2])
        }
        return semantics.AddParameter(string(idTok.Lit), typeStr), nil
    }()
  >>
    ;

VP
    : empty
    | Vars
    ;

FCall
    : id lparen FCallP rparen semicolon
     <<
        func() (Attrib, error) {
            idTok, ok := X[0].(*token.Token)
            if !ok {
                return nil, fmt.Errorf("fCall: se esperaba *token.Token en X[0], obtuve %T", X[0])
            }
            return semantics.ValidateFunctionCall(string(idTok.Lit), X[2]), nil
        }()
    >>
    ;

FCallP
    : empty
    <<
        func() (Attrib, error) {
            return semantics.EmptyArgList()
        }()
    >>
    | Expresion Z
    <<
        func() (Attrib, error) {
            return semantics.BuildArgList($0, $1)
        }()
    >>
    ;

Z
    : empty
    <<
        func() (Attrib, error) {
            return semantics.EmptyArgList()
        }()
    >>
    | comma Expresion Z
    <<
        func() (Attrib, error) {
            return semantics.AppendArg($1, $2)
        }()
    >>
    ;
