/* Lexical Parser */
!whitespace : '\t' | '\n' | '\r' | ' ' ;
!lineComment  : '/' '/' { . } '\n' ;
!blockComment : '/' '*' { . | '*' } '*' '/' ;

_letter : 'A'-'Z' | 'a'-'z' | '_' ;
_digit : '0'-'9' ;
_alpha : _letter | _digit ;

string_literal : '"' {_alpha | ' ' | '!' | '?' | '.' | ',' | ';' | ':' | '-' | '_' | '(' | ')' | '+' | '*' | '{' | '}' | '[' | ']' | '=' | '&' | '/' | '%' }'"' ;
nums : '0' | '1'-'9' {_digit} ;


/* keywords */
program: 'p' 'r' 'o' 'g' 'r' 'a' 'm' ;
main: 'm' 'a' 'i' 'n' ;
end: 'e' 'n' 'd' ;
var: 'v' 'a' 'r' ;
print: 'p' 'r' 'i' 'n' 't' ;
while: 'w' 'h' 'i' 'l' 'e';
do: 'd' 'o' ;
if : 'i' 'f' ;
else : 'e' 'l' 's' 'e' ;
void: 'v' 'o' 'i' 'd' ;
int: 'i' 'n' 't' ;
float: 'f' 'l' 'o' 'a' 't' ;

id : _letter {_alpha} ;

/* punctuation */
plus : '+' ;
minus : '-' ;
mul : '*' ;
div : '/' ;

lt : '<' ;
gt : '>' ;
neq : '!' '=' ;

lbrace : '{' ;
rbrace : '}' ;
assign : '=' ;
lparen : '(' ;
rparen : ')' ;
lbracket : '[' ;
rbracket : ']' ;
comma : ',' ;
semicolon : ';' ;
period : '.' ;
colon : ':' ;

/* Syntactic Parsr */
<<
import (
	"BabyDuck/semantics"
)
>>

Programa
  : program  id semicolon ProgramaP main Body end
  <<
        func() (Attrib, error) {
            err := semantics.AddFunction($1, "program")
            if err != nil {
                return nil, err
            }
            semantics.SetCurrentFunction($1) // Cambia el contexto a "program"
            return nil, nil
        }()
    >>
    ;

ProgramaP
    : Vars FP
    | FP
    ;

FP
    : Funcs FP
    | empty
    ;

Vars 
    : var VarsP
    ;

VarsP
    : id X colon Type semicolon Y 
    <<
        func() (Attrib, error) {
            ids := semantics.CollectIDs($0, $1) // Reúne todos los ids de la declaración
            for _, id := range ids {
                err := semantics.AddVariable(id, $3)
                if err != nil {
                    return nil, err // Detecta variables doblemente declaradas
                }
            }
            return nil, nil
        }()
    >>
    ;

X
    : comma id X
    <<
        func() (Attrib, error) {
            return semantics.AppendID($1, $2) // Construye lista de ids
        }()
    >>
    | empty
    <<
        func() (Attrib, error) {
            return semantics.EmptyIDList()
        }()
    >>
    ;

Y
    : VarsP
    | empty
    ;

Type
    : int <<0,nil>>
    | float <<0,nil>>
    ;

Body
    : lbrace BodyP rbrace
    ;

BodyP
    : empty
    | Statement BodyP
    ;

Statement
    : Assign
    | Condition
    | Cycle
    | FCall
    | Print
    ;

Print
    : print lparen PrintP rparen semicolon
    ;

PrintP
    : string_literal PrintPP
    ;

PrintPP
    : empty
    | PrintP
    ;

Assign
    : id assign Expresion semicolon
    ;

Cycle
    : while lparen Expresion rparen do Body semicolon
    ;

Condition
    : if lparen Expresion rparen Body ConditionP
    ;

ConditionP
    : empty
    | else Body
    ;

Expresion
    : Exp EP
    ;

EP
    : empty
    | gt Exp
    | lt Exp
    | neq Exp
    ;

Exp
    : Termino ExpP
    ;

ExpP
    : empty
    | plus Termino ExpP
    | minus Termino ExpP
    ;

Termino
    : Factor TP
    ;

TP
    :empty
    | mul Factor TP
    | div Factor TP
    ;

Factor
    : lparen Expresion rparen
    | FactorP FactorPP
    ;

FactorP 
    : empty
    | plus
    | minus
    ;

FactorPP
    : id 
    | CTE
    ;

CTE
    : nums
    | nums period nums
    ;

Funcs
    : void id lparen FuncsP rparen lbracket VP Body rbracket semicolon
    ;

FuncsP
    : empty
    | id colon Type W
    ;

W
    : empty
    | comma id colon Type W
    ;

VP
    : empty
    | Vars
    ;

FCall
    : id lparen FCallP rparen semicolon
    ;

FCallP
    : empty
    | Expresion Z
    ;

Z
    : empty
    | comma Expresion Z
    ;
